name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate enhanced release notes with Copilot
        id: release_notes
        run: |
          # Get the previous tag for comparison
          PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_version.outputs.VERSION }}^ 2>/dev/null || echo "")
          
          # If no previous tag, get all commits
          if [ -z "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" ${{ steps.get_version.outputs.VERSION }})
            COMMITS_FOR_HIGHLIGHTS=$(git log --pretty=format:"%s (%h)" ${{ steps.get_version.outputs.VERSION }})
          else
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" $PREV_TAG..${{ steps.get_version.outputs.VERSION }})
            COMMITS_FOR_HIGHLIGHTS=$(git log --pretty=format:"%s (%h)" $PREV_TAG..${{ steps.get_version.outputs.VERSION }})
          fi
          
          # Save raw changelog to file
          echo "$CHANGELOG" > changelog_raw.md
          
          # Create a concise list of key changes for the highlights section
          # First look for conventional commit prefixes
          HIGHLIGHT_COMMITS=$(echo "$COMMITS_FOR_HIGHLIGHTS" | grep -E 'feat:|fix:|BREAKING CHANGE:|perf:|refactor:' | head -5)
          
          # If no commits match the pattern, just take the first few commits
          if [ -z "$HIGHLIGHT_COMMITS" ]; then
            HIGHLIGHT_COMMITS=$(echo "$COMMITS_FOR_HIGHLIGHTS" | head -5)
          fi
          
          # Use GitHub CLI to leverage Copilot to enhance the changelog
          echo "## Key Highlights" > changelog.md
          echo "" >> changelog.md
          echo "Most important changes in this release:" >> changelog.md
          echo "$HIGHLIGHT_COMMITS" >> changelog.md
          
          # In the future, we could use GitHub Copilot to generate a more concise summary
          # by uncommenting and implementing the following:
          # 
          # PROMPT="Summarize the following commit messages in 3-5 bullet points, highlighting only the most important changes:"
          # PROMPT="$PROMPT\n\n$COMMITS_FOR_HIGHLIGHTS"
          # 
          # # Call to a hypothetical Copilot CLI tool (not yet available)
          # # AI_HIGHLIGHTS=$(echo "$PROMPT" | gh copilot suggest --max-tokens 300)
          # # echo "$AI_HIGHLIGHTS" >> changelog.md
          
          echo "" >> changelog.md
          echo "## What's Changed" >> changelog.md
          echo "" >> changelog.md
          echo "$CHANGELOG" >> changelog.md
          echo "" >> changelog.md
          echo "## Summary" >> changelog.md
          echo "This release was automatically generated and enhanced with GitHub Copilot." >> changelog.md
          
          # Escape newlines for GitHub Actions
          CHANGELOG_ESCAPED="${CHANGELOG//'%'/'%25'}"
          CHANGELOG_ESCAPED="${CHANGELOG_ESCAPED//$'\n'/'%0A'}"
          CHANGELOG_ESCAPED="${CHANGELOG_ESCAPED//$'\r'/'%0D'}"
          
          # Set output for subsequent steps
          echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT
          
          # Create the release notes file for the release step
          cat changelog.md > release_notes.md

      - name: Build release binaries
        run: make release
        env:
          VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: noidea ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          body_path: release_notes.md
          generate_release_notes: false
          files: |
            dist/noidea_*
            dist/checksums-*.txt
          token: ${{ secrets.GITHUB_TOKEN }}

  docker-release:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-release
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set lowercase repository owner
        id: repository_owner
        run: echo "OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        id: login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ steps.repository_owner.outputs.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
        
      # Fallback login with PAT if available and configured
      - name: Login with PAT
        if: ${{ always() && steps.login.outcome == 'failure' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ steps.repository_owner.outputs.OWNER }}
          password: ${{ secrets.CR_PAT }}

      - name: Get build date
        id: build_date
        run: echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          build-args: |
            VERSION=${{ steps.get_version.outputs.VERSION }}
            COMMIT=${{ github.sha }}
            BUILD_DATE=${{ steps.build_date.outputs.DATE }}
          tags: |
            ghcr.io/${{ steps.repository_owner.outputs.OWNER }}/noidea:latest
            ghcr.io/${{ steps.repository_owner.outputs.OWNER }}/noidea:${{ steps.get_version.outputs.VERSION }} 