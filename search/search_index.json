{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\ud83e\udde0 NoIdea <p>Git Assistant with AI Powers &amp; Sassy Feedback</p> Get Started GitHub <ul> <li> <p> Smart Commit Messages</p> <p>Get AI-powered commit message suggestions that accurately describe your changes, making your commit history more professional and useful</p> <p> Learn more</p> </li> <li> <p> Sassy Feedback</p> <p>Receive witty, personalized feedback from our judgmental Moai after each commit, with multiple AI personalities to choose from</p> <p> Features</p> </li> <li> <p> Insights &amp; Analysis</p> <p>Track coding patterns, analyze commit quality, and get weekly summaries of your Git activity</p> <p> Commands</p> </li> <li> <p> GitHub Integration</p> <p>Generate AI-enhanced release notes, manage releases, and integrate with GitHub Actions workflows</p> <p> GitHub Features</p> </li> </ul>"},{"location":"#what-is-noidea","title":"\ud83d\uddff What is NoIdea?","text":"<p>NoIdea is a Git companion that makes your commits better and funnier:</p> <ul> <li>Get smart commit messages based on your changes</li> <li>Receive sassy feedback from a judgmental Moai after each commit</li> <li>Analyze your Git history for insights and patterns</li> </ul>"},{"location":"#installation","title":"\u26a1 Installation","text":"<pre><code># Clone and install\ngit clone https://github.com/AccursedGalaxy/noidea.git\ncd noidea\n./install.sh\n</code></pre> Repository Setup <p>After installation, you need to set up NoIdea in your Git repository:</p> <pre><code># Navigate to your repository\ncd /path/to/your/repo\n\n# Initialize NoIdea\nnoidea init\n\n# Enable auto commit suggestions (optional)\ngit config noidea.suggest true\n</code></pre> <p>Pro Tip</p> <p>Use <code>noidea config --init</code> to set up your configuration interactively!</p>"},{"location":"#features","title":"\u2728 Core Features","text":"AI-powered Commit Suggestions <p>When you're ready to commit, NoIdea analyzes your changes and suggests professional commit messages:</p> <pre><code>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\ud83e\udde0 Analyzing staged changes and 10 recent commits\nGenerating professional commit message suggestion...\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2728 Suggested commit message:\nfeat(user-auth): implement password reset functionality with email verification\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> Post-commit Feedback <p>After each commit, the Moai will judge your work with witty commentary:</p> <pre><code>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\ud83d\uddff  (\u0ca0_\u0ca0) Your commit message was 'fix final final pls real'\n\"You've entered the 2AM hotfix arc. A legendary time.\"\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> Weekly Summaries &amp; Git Insights <p>Track your coding patterns and get insights about your work habits with detailed summaries:</p> <pre><code># Generate a summary of the last 30 days\nnoidea summary --days 30\n\n# Include AI insights\nnoidea summary --ai\n</code></pre> AI Personalities <p>NoIdea offers several AI personalities for feedback:</p> Snarky Code Reviewer <p>Witty, sarcastic feedback that doesn't hold back</p> Supportive Mentor <p>Encouraging, positive feedback to keep you motivated</p> Git Expert <p>Technical, professional feedback focused on best practices</p> Motivational Speaker <p>Energetic enthusiasm to pump you up</p> <p>You can create your own personality easily via our configuration system.</p>"},{"location":"#github-integration","title":"\ud83d\ude80 GitHub Integration","text":"<p>NoIdea provides seamless GitHub integration for managing releases and generating enhanced release notes:</p> Authentication &amp; Setup <pre><code># Authenticate with GitHub\nnoidea github auth\n\n# Install GitHub hooks (optional)\nnoidea github hook-install\n</code></pre> Enhanced Release Notes <p>Generate AI-powered release notes that enhance GitHub's standard format:</p> <pre><code># Generate notes for the latest tag\nnoidea github release notes\n\n# Wait for GitHub Actions workflows to complete before generating\nnoidea github release notes --wait-for-workflows\n</code></pre> <p>Workflow Awareness</p> <p>The <code>--wait-for-workflows</code> flag makes NoIdea monitor GitHub Actions status and automatically generate notes once workflows complete, preserving GitHub's generated content while enhancing it with AI.</p>"},{"location":"#commands","title":"\ud83d\udd27 Commands Reference","text":"Command Description <code>noidea init</code> Set up Git hooks in your repository <code>noidea suggest</code> Get commit message suggestions <code>noidea suggest -i</code> Interactive mode to approve/reject suggestions <code>noidea suggest -f</code> Use full diff analysis for more detailed suggestions <code>noidea moai</code> Display Moai feedback for the last commit <code>noidea moai --ai</code> Use AI-powered feedback analysis <code>noidea moai --personality supportive_mentor</code> Use a specific AI personality <code>noidea moai --list-personalities</code> List all available personalities <code>noidea summary [--days 30]</code> Generate summary of recent Git activity <code>noidea summary --show-commits</code> Include detailed commit history in summary <code>noidea summary --export markdown</code> Export summary in markdown format <code>noidea config</code> Configure noidea <code>noidea config --init</code> Interactive configuration setup <code>noidea config apikey</code> Set up your API key securely <code>noidea config apikey-status</code> Check your API key validity <code>noidea github auth</code> Authenticate with GitHub using a Personal Access Token <code>noidea github status</code> Check GitHub authentication status <code>noidea github hook-install</code> Install GitHub integration Git hooks <code>noidea github release notes</code> Generate AI-enhanced release notes <code>noidea github release notes --wait-for-workflows</code> Wait for GitHub Actions to complete before generating notes"},{"location":"#configuration","title":"\u2699\ufe0f Configuration","text":"<p>Configure NoIdea to match your workflow:</p> <pre><code># Configure interactively\nnoidea config --init\n\n# Add your API key (for AI-powered features)\nnoidea config apikey\n\n# Check API key validity\nnoidea config apikey-status\n</code></pre> Advanced Configuration <p>For more advanced setup, you can edit your configuration file at <code>~/.noidea/config.toml</code>:</p> <pre><code>[llm]\nenabled = true\nprovider = \"xai\"\napi_key = \"\"\nmodel = \"grok-4-fast-reasoning\"\ntemperature = 0.7\n\n[moai]\nuse_lint = false\nfaces_mode = \"random\"\npersonality = \"snarky_reviewer\"\npersonality_file = \"~/.noidea/personalities.toml\"\n</code></pre>"},{"location":"#security","title":"\ud83d\udd12 Security &amp; Privacy","text":"<p>NoIdea takes your security seriously:</p> <ul> <li>API keys are stored securely on your local machine</li> <li>No data is sent to our servers - all AI processing happens via your own API keys</li> <li>Your commit history and code never leaves your system without your explicit permission</li> <li>Legacy .env files are being deprecated in favor of secure storage</li> </ul> <p>Note</p> <p>When using AI features, your code diffs are sent to the AI provider you've configured. Choose a provider you trust.</p>"},{"location":"#why-noidea","title":"\ud83e\udd14 Why NoIdea?","text":"<p>Because Git is too serious. Coding is chaos. Let's embrace it.</p> <p>This tool won't improve your Git hygiene, but it will make it more entertaining.</p>"},{"location":"#contribution","title":"\ud83e\udd1d Contribution &amp; Support","text":"<p>We welcome contributions from the community! Whether you want to report a bug, suggest a feature, or contribute code, we'd love your help.</p> \ud83d\udc1b Report a Bug \ud83d\udca1 Suggest a Feature \ud83d\udd04 Fork the Project \ud83d\ude80 Submit a PR"},{"location":"#project-status","title":"\ud83d\udcca Project Status","text":"Feature Status Moai face after commit \u2705 Done AI-based commit feedback \u2705 Done Config file support \u2705 Done Weekly summaries \u2705 Done On-demand commit analysis \u2705 Done Commit message suggestions \u2705 Done Enhanced terminal output \u2705 Done POSIX-compatible hooks \u2705 Done Secure API key storage \u2705 Done Lint feedback \ud83d\udee0\ufe0f In progress Commit streak insights \ud83d\udd1c Coming Soon"},{"location":"roadmap/","title":"Roadmap","text":"\ud83d\ude80 Project Roadmap <p>This roadmap outlines the planned development path for NoIdea. We're committed to continuously improving the tool while maintaining its core values of making Git more fun and productive.</p> <p>Note</p> <p>This roadmap is a living document and may be updated as priorities shift and new opportunities arise.</p> \ud83d\udcc5 Timeline Overview Q1 2025 Core Enhancements <ul> <li>\u2705 GitHub PAT Authentication and Secure Storage</li> <li>\u2705 Enhanced Release Notes Generation with AI</li> <li>\u2705 GitHub Actions Integration for Releases</li> <li>GitHub Issue Basic Integration (In Progress)</li> <li>Secure Token Storage System Enhancement</li> </ul> Q2 2025 Advanced Features <ul> <li>GitHub Issues Advanced Integration</li> <li>Issue-to-Commit Linking System</li> <li>Branch Management Automation</li> <li>Local Cache System for GitHub Data</li> <li>Smart Issue Status Transitions</li> </ul> Q3 2025 Integration &amp; Expansion <ul> <li>GitHub Projects Integration</li> <li>Project Board Automation</li> <li>AI-Powered Issue Creation</li> <li>Work Estimation Features</li> <li>Enhanced Team Collaboration Tools</li> </ul> Q4 2025 Advanced AI &amp; Workflow <ul> <li>AI-Enhanced Project Management</li> <li>Predictive Issue Management</li> <li>Advanced Release Analytics</li> <li>Workflow Optimization Features</li> <li>Extended Plugin System</li> </ul> \ud83d\udcca Success Metrics <p>We'll measure our progress through the following key metrics:</p> <ul> <li>Your success metrics here</li> <li>Your success metrics here</li> </ul>"},{"location":"roadmap/#ai-enhancements","title":"\ud83e\udd16 AI Enhancements","text":"Planned Improvements <ul> <li>Enhanced commit message generation with better context understanding</li> <li>AI-powered issue summarization and categorization</li> <li>Smart work estimation based on historical data</li> <li>Predictive analytics for project timelines</li> </ul> New AI Features <ul> <li>Natural language issue creation and management</li> <li>Intelligent project board organization</li> <li>Code change impact analysis</li> <li>Team productivity insights and suggestions</li> </ul>"},{"location":"roadmap/#git-integration","title":"\ud83d\udd17 Git Integration","text":"Core Git Features <ul> <li>Enhanced branch management automation</li> <li>Smart commit-to-issue linking</li> <li>Automated workflow transitions</li> <li>Advanced Git hooks for project management</li> </ul> Workflow Improvements <ul> <li>Streamlined issue-to-commit workflow</li> <li>Automated status updates based on commits</li> <li>Project board synchronization</li> <li>Team collaboration enhancements</li> </ul>"},{"location":"roadmap/#api-extensibility","title":"\ud83d\udd0c API &amp; Extensibility","text":"API Improvements <ul> <li>Enhanced GitHub API integration</li> <li>Local caching system for better performance</li> <li>Webhook support for real-time updates</li> <li>Extended authentication options</li> </ul> Extension System <ul> <li>Plugin system for custom workflows</li> <li>Custom AI personality support</li> <li>Third-party integration capabilities</li> <li>Custom command extensions</li> </ul>"},{"location":"roadmap/#user-experience","title":"\u2728 User Experience","text":"Interface Improvements <ul> <li>Simplified project management commands</li> <li>Interactive issue management</li> <li>Enhanced progress visualization</li> <li>Improved error handling and feedback</li> </ul> New User Features <ul> <li>Project templates and presets</li> <li>Team collaboration tools</li> <li>Advanced analytics dashboard</li> <li>Customizable workflow automation</li> </ul>"},{"location":"blog/","title":"NoIdea Blog","text":"<p>Welcome to the NoIdea blog, where we share technical insights, development stories, and tips for making your Git workflows more entertaining and productive.</p> <p>Our posts cover topics like:</p> <ul> <li>\ud83d\udd12 Secure credential management</li> <li>\ud83e\udde0 AI integration techniques</li> <li>\ud83d\udee0\ufe0f Git workflow optimization</li> <li>\ud83d\udcbb Go development patterns and practices</li> </ul> <p>Follow along as we share the technical challenges and solutions behind building NoIdea, our Git assistant with AI-powered commit messages and sassy feedback.</p>"},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/","title":"Building a Cross-Platform Secure API Key Manager in Go","text":"<p>While developing NoIdea, my Git assistant with AI-powered features, I faced a significant challenge: how could I securely store API keys across different operating systems without compromising security or frustrating users? In this article, I'll walk you through my solution and the lessons I learned along the way.</p>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#the-security-challenge-explained","title":"The Security Challenge Explained","text":"<p>First, let me explain the problem. Modern AI tools like NoIdea need to communicate with AI services (like OpenAI or xAI), which require API keys for authentication. These keys are essentially long strings that look something like <code>xai_sk_1a2b3c4d5e6f7g8h9i0j</code>.</p> <p>The tricky part? API keys are like digital passwords to paid services. If someone gets your key, they could: - Use your AI services and run up charges on your account - Potentially access your data - Impersonate you to the service</p> <p>Common approaches for storing these keys have serious drawbacks:</p> <ul> <li> <p>\u274c Environment variables: These are variables stored in your computer's memory while you're using it. The problem? They're often visible in process listings, meaning other programs can potentially see them.</p> </li> <li> <p>\u274c Plaintext <code>.env</code> files: Many developers store keys in simple text files called <code>.env</code> files. If you accidentally commit these to GitHub or other version control systems, your keys are exposed to the world (there are even bots that scan GitHub for leaked API keys).</p> </li> <li> <p>\u274c Hardcoded credentials: Some developers embed keys directly in their code. This is perhaps the worst approach since your keys are permanently recorded in your code history.</p> </li> </ul> <p>I needed a solution that would work across Windows, macOS, and Linux while keeping keys secure and still providing a smooth experience for users.</p>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#my-tiered-security-solution","title":"My Tiered Security Solution","text":"<p>After researching the problem, I designed a system with multiple layers of protection:</p> <pre><code>// Example from my codebase\nfunc GetAPIKey(provider string) (string, error) {\n    // Standardize the provider name for consistency\n    provider = normalizeProviderName(provider)\n\n    // Try system keyring first (macOS Keychain, Windows Credential Manager, etc.)\n    apiKey, err := keyring.Get(ServiceName, provider)\n    if err == nil &amp;&amp; apiKey != \"\" {\n        return apiKey, nil\n    }\n\n    // Fall back to encrypted storage if keyring unavailable\n    return getFromFallbackStorage(provider)\n}\n</code></pre> <p>Let me break down what this does:</p> <ol> <li>First Security Tier: The function tries to use the operating system's built-in credential storage:</li> <li>On a Mac, this is the Keychain (the same secure storage that remembers your WiFi passwords)</li> <li>On Windows, it uses the Windows Credential Manager</li> <li>On Linux, it uses the Secret Service API (programs like GNOME Keyring or KDE Wallet)</li> </ol> <p>These are secure, encrypted storage systems managed by your operating system with proper permissions.</p> <ol> <li>Second Security Tier: If the system keyring isn't available (which happens on some Linux setups or in certain environments), I fall back to a custom encrypted storage in the user's home directory.</li> </ol> <p>This \"defense in depth\" approach ensures that even if one security measure fails, there's a backup. It's like having both a lock on your door and a safe inside your house.</p>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#how-i-implemented-it-with-real-world-examples","title":"How I Implemented It (With Real-World Examples)","text":"","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#1-solving-the-provider-name-problem","title":"1. Solving the Provider Name Problem","text":"<p>One of the first challenges I encountered was that users might refer to the same AI provider in different ways. For example: - \"openai\", \"open-ai\", \"gpt\" all refer to OpenAI - \"xai\", \"x-ai\", \"grok\" all refer to xAI</p> <p>This might seem like a minor issue, but it can lead to confusing situations. Imagine storing your key under \"openai\" but then your program looking for it under \"open-ai\" - it would fail to find it!</p> <p>My first implementation was simple but limited:</p> <pre><code>// My initial implementation - works but isn't flexible\nfunc normalizeProviderName(provider string) string {\n    provider = strings.ToLower(provider)\n\n    // Hardcoded mappings - not ideal for extensibility\n    switch provider {\n    case \"openai\", \"open-ai\", \"gpt\":\n        return \"openai\"\n    case \"xai\", \"x-ai\", \"grok\":\n        return \"xai\" \n    case \"deepseek\", \"deep-seek\":\n        return \"deepseek\"\n    default:\n        return provider\n    }\n}\n</code></pre> <p>This worked initially, but I quickly realized it had limitations: - What if a new AI provider emerged? I'd need to update my code. - What if users wanted to use their own custom naming? They'd be out of luck. - What if a company rebranded? Again, code updates would be needed.</p> <p>So I refactored it to a more flexible system:</p> <pre><code>// Default provider alias mapping - maps standard provider names to their known aliases\nvar defaultProviderAliases = map[string][]string{\n    \"openai\":    {\"open-ai\", \"gpt\", \"chatgpt\", \"davinci\"},\n    \"xai\":       {\"x-ai\", \"grok\", \"x.ai\"},\n    \"deepseek\":  {\"deep-seek\", \"deepseek-ai\"},\n    \"anthropic\": {\"claude\", \"anthropic-ai\"},\n    \"mistral\":   {\"mistral-ai\", \"mistralai\"},\n}\n\n// Reverse lookup map built at init time\nvar aliasToProvider map[string]string\n\nfunc init() {\n    // Load provider aliases (default + user-defined)\n    providerAliases := loadProviderAliases()\n\n    // Build reverse lookup map\n    aliasToProvider = make(map[string]string)\n    for provider, aliases := range providerAliases {\n        aliasToProvider[provider] = provider // Map standard name to itself\n        for _, alias := range aliases {\n            aliasToProvider[alias] = provider\n        }\n    }\n}\n\nfunc normalizeProviderName(provider string) string {\n    provider = strings.ToLower(provider)\n\n    // Look up in our alias map\n    if standardName, exists := aliasToProvider[provider]; exists {\n        return standardName\n    }\n\n    // If no match, return as-is\n    return provider\n}\n</code></pre> <p>The key improvement is that now users can define their own aliases through a JSON configuration file:</p> <pre><code>// loadProviderAliases combines default aliases with user-defined ones\nfunc loadProviderAliases() map[string][]string {\n    // Start with default aliases\n    combined := make(map[string][]string)\n    for provider, aliases := range defaultProviderAliases {\n        combined[provider] = aliases\n    }\n\n    // Try to load user-defined aliases from ~/.noidea/secure/provider_aliases.json\n    homeDir, err := os.UserHomeDir()\n    if err != nil {\n        return combined // Fall back to defaults\n    }\n\n    // Load and parse user aliases from JSON file\n    aliasPath := filepath.Join(homeDir, FallbackDir, AliasFile)\n    data, err := os.ReadFile(aliasPath)\n    if err != nil {\n        // Create template file for the user\n        createDefaultAliasFile(homeDir)\n        return combined\n    }\n\n    // Merge user aliases with defaults\n    var userAliases map[string][]string\n    if err := json.Unmarshal(data, &amp;userAliases); err == nil {\n        for provider, aliases := range userAliases {\n            if existing, ok := combined[provider]; ok {\n                // Add user aliases, avoiding duplicates\n                for _, alias := range aliases {\n                    if !contains(existing, alias) {\n                        combined[provider] = append(combined[provider], alias)\n                    }\n                }\n            } else {\n                // Add new provider\n                combined[provider] = aliases\n            }\n        }\n    }\n\n    return combined\n}\n</code></pre> <p>Think of this like a translation dictionary. When a user types \"gpt\", my code looks it up and says \"Oh, you mean OpenAI!\" This way, the actual provider name is standardized for storage, but users can use whatever terminology they're familiar with.</p>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#why-this-matters","title":"Why This Matters","text":"<p>This might seem like excessive effort for a simple name mapping, but it has real usability benefits:</p> <ol> <li> <p>User Freedom: Different communities use different terminology. AI researchers might say \"OpenAI,\" while developers might say \"GPT,\" and a team might have their own internal name like \"chat-provider-1\".</p> </li> <li> <p>Future-Proofing: New AI providers emerge regularly. With this system, users can add support for new providers without waiting for a software update.</p> </li> <li> <p>Team Standardization: In a team environment, you can establish standardized names that match your documentation or internal systems.</p> </li> </ol> <p>When users first use the system, I automatically create a template configuration file they can edit:</p> <pre><code>// Example of the JSON template created at ~/.noidea/secure/provider_aliases.json\n{\n  \"example-provider\": [\"alias1\", \"alias2\"],\n  \"openai\": [\"gpt4\", \"oai\"]\n}\n</code></pre>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#2-securing-keys-on-different-operating-systems","title":"2. Securing Keys on Different Operating Systems","text":"<p>The next challenge was creating a secure storage system that works across platforms. Different operating systems have different security models:</p> <pre><code>func storeInFallbackStorage(provider, apiKey string) error {\n    homeDir, err := os.UserHomeDir()\n    if err != nil {\n        return fmt.Errorf(\"failed to get home directory: %w\", err)\n    }\n\n    secureDir := filepath.Join(homeDir, FallbackDir)\n    if err := os.MkdirAll(secureDir, 0700); err != nil {\n        return fmt.Errorf(\"failed to create secure directory: %w\", err)\n    }\n\n    // Update or add the new key with obfuscation\n    existingData[provider] = obfuscate(apiKey)\n\n    // Write with strict permissions - only the user can read/write\n    return os.WriteFile(filePath, []byte(sb.String()), 0600)\n}\n</code></pre> <p>This fallback system has several security features: - A dedicated directory with restricted permissions (0700 means only the owner can access it) - File permissions that limit access (0600 again ensures only the owner can read or write) - Simple obfuscation to prevent casual viewing</p> <p>While not as secure as the OS keyring, it's significantly better than plaintext storage in most cases.</p>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#3-validating-keys-before-storage","title":"3. Validating Keys Before Storage","text":"<p>An often-overlooked security feature is validation. I've seen too many systems that happily store invalid API keys, leading to mysterious failures later. </p> <p>My system checks if a key is valid before storing it:</p> <pre><code>isValid, err := secure.ValidateAPIKey(provider, apiKey)\nif err != nil {\n    fmt.Println(color.YellowString(\"Error during validation\"))\n    fmt.Printf(\"Error details: %v\\n\", err)\n} else if isValid {\n    fmt.Println(color.GreenString(\"Valid\"))\n} else {\n    fmt.Println(color.RedString(\"Invalid\"))\n}\n</code></pre> <p>Here's how the validation works:</p> <pre><code>// ValidateAPIKey checks if the API key works with the provider\nfunc ValidateAPIKey(provider, apiKey string) (bool, error) {\n    // For all providers, try to validate against their API\n    var baseURL string\n\n    switch provider {\n    case \"xai\":\n        baseURL = \"https://api.x.ai/v1/models\"\n    case \"openai\":\n        baseURL = \"https://api.openai.com/v1/models\"\n    case \"deepseek\":\n        baseURL = \"https://api.deepseek.com/v1/models\"\n    default:\n        // Default to OpenAI for unknown providers\n        baseURL = \"https://api.openai.com/v1/models\"\n    }\n\n    // Make a test API call that doesn't cost money\n    client := &amp;http.Client{Timeout: 5 * time.Second}\n    req, err := http.NewRequest(\"GET\", baseURL, nil)\n    if err != nil {\n        return false, err\n    }\n\n    req.Header.Add(\"Authorization\", \"Bearer \"+apiKey)\n\n    resp, err := client.Do(req)\n    if err != nil {\n        return false, fmt.Errorf(\"connection error: %w\", err)\n    }\n    defer resp.Body.Close()\n\n    // 401/403 means unauthorized - invalid key\n    return resp.StatusCode != 401 &amp;&amp; resp.StatusCode != 403, nil\n}\n</code></pre> <p>This validation step offers several benefits: - Catches typos or incorrect keys immediately - Avoids storing keys that won't work - Provides immediate feedback to users - Helps distinguish between network errors and invalid keys</p>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#4-making-migration-easy","title":"4. Making Migration Easy","text":"<p>Recognizing that many users would already have API keys stored in environment variables or <code>.env</code> files, I created a migration script:</p> <pre><code># Automatically detect and migrate API keys from various sources\nfor location in \"${LOCATIONS[@]}\"; do\n    if [ -f \"$location\" ]; then\n        echo -e \"${YELLOW}Found .env file at $location${NC}\"\n\n        # Check for API keys\n        if grep -q \"XAI_API_KEY\" \"$location\"; then\n            API_KEY=$(grep \"XAI_API_KEY\" \"$location\" | cut -d= -f2)\n            PROVIDER=\"xai\"\n            echo \"Found xAI API key\"\n        elif grep -q \"OPENAI_API_KEY\" \"$location\"; then\n            # Handle other providers...\n        fi\n\n        # ...migration code...\n    fi\ndone\n</code></pre> <p>This script: 1. Scans common locations for <code>.env</code> files 2. Checks for known API key environment variables 3. Extracts keys and their associated providers 4. Validates the keys 5. Stores them in the secure storage system 6. Optionally removes them from the insecure locations</p>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#a-user-friendly-interface-for-security","title":"A User-Friendly Interface for Security","text":"<p>I've found that security mechanisms are only effective if people actually use them. To encourage adoption, I designed a clean CLI interface:</p> <pre><code>$ noidea config apikey-status\n\nSecure Storage Status:\nPlatform: linux\nSystem keyring: Available\nFallback storage: Available\n\nAPI Key Status:\nProvider: xai\nEnvironment: Not set\nSecure storage: Set\n\nActive Key:\nUsing: Secure storage key\nValidating secure key... Valid\n</code></pre> <p>For users who want to customize provider aliases, they can edit a simple JSON file:</p> <pre><code># Edit the provider aliases file\nnano ~/.noidea/secure/provider_aliases.json\n\n# Example custom configuration\n{\n  \"openai\": [\"my-openai\", \"chatgpt-custom\"],\n  \"my-company-api\": [\"internal-llm\", \"company-ai\"]\n}\n</code></pre>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#lessons-i-learned-that-you-can-apply","title":"Lessons I Learned (That You Can Apply)","text":"<p>Building this system taught me several valuable lessons that you can apply to your own projects:</p> <ol> <li> <p>Security doesn't have to hurt UX: By providing fallbacks and clear guidance, you can maintain strong security without frustrating users. Always aim for secure defaults with clear paths to customize.</p> </li> <li> <p>Trust the platform when possible: Native OS security features are typically well-audited and robust. I use the system keyring when available because it's maintained by security professionals and integrated with the OS.</p> </li> <li> <p>Defense in depth works: Multiple security layers provide protection even when one layer fails. My tiered approach means that even if one security mechanism is compromised, there are additional protections.</p> </li> <li> <p>Validation improves reliability: Checking keys before storage prevents frustrating invalid credential issues later. This seems obvious but is often overlooked.</p> </li> <li> <p>Prefer configuration over code: For elements that might change or expand (like provider aliases), use configuration-based approaches rather than hardcoding values. This makes your software more adaptable without needing code changes.</p> </li> </ol>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#how-you-can-apply-this-in-your-projects","title":"How You Can Apply This in Your Projects","text":"<p>If you're building an application that needs to store sensitive credentials, here are some practical steps:</p> <ol> <li>Look for existing secure storage APIs:</li> <li>On Windows: Windows Credential Manager API</li> <li>On macOS: Keychain Services API</li> <li>On Linux: Secret Service API</li> <li> <p>Cross-platform: Consider libraries like go-keyring or keyring for Python</p> </li> <li> <p>Implement a fallback mechanism:</p> </li> <li>Store in user's home directory with restricted permissions</li> <li>Use basic encryption/obfuscation at minimum</li> <li> <p>Clearly document the security model</p> </li> <li> <p>Validate credentials at storage time:</p> </li> <li>Make a test request that doesn't consume resources</li> <li>Provide clear feedback about validity</li> <li> <p>Allow force-storing with warnings if needed</p> </li> <li> <p>Design for user customization:</p> </li> <li>Allow configuration without code changes</li> <li>Provide sensible defaults</li> <li> <p>Create templates for common scenarios</p> </li> <li> <p>Help users migrate:</p> </li> <li>Provide tools to detect and import credentials from common locations</li> <li>Guide users through the transition</li> <li>Don't break existing workflows during migration</li> </ol>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#future-improvements","title":"Future Improvements","text":"<p>While my current system works well, I'm considering several improvements:</p> <ol> <li>More robust encryption for the fallback storage mechanism - perhaps using industry-standard encryption libraries rather than simple obfuscation</li> <li>Additional validation methods for different API providers to handle their specific authentication patterns</li> <li>Enhanced key rotation policies and workflows to encourage regular key updates</li> <li>Web interface for managing provider aliases and credentials for less technical users</li> </ol>","tags":["api-keys","security","cross-platform","golang"]},{"location":"blog/building-a-cross-platform-secure-api-key-manager-in-go/#conclusion","title":"Conclusion","text":"<p>Securing API keys is a critical aspect of modern application development, especially for tools that interact with AI services. By implementing this tiered approach, I've built a system that:</p> <ul> <li>\u2705 Provides strong security guarantees</li> <li>\u2705 Works seamlessly across platforms</li> <li>\u2705 Offers a smooth user experience</li> <li>\u2705 Handles migration gracefully</li> <li>\u2705 Remains flexible and extensible through user-configurable aliases</li> </ul> <p>The most important lesson I've learned is that good security doesn't have to come at the expense of usability. With thoughtful design and attention to user needs, you can create security systems that people actually want to use.</p> <p>For more information about NoIdea's approach to API key management, check out the API Key Management documentation. </p>","tags":["api-keys","security","cross-platform","golang"]},{"location":"dev-guide/code-style/","title":"Code Style Guide","text":"<p>This document outlines the coding standards and style guidelines for the NoIdea project. Following these guidelines ensures consistency across the codebase and makes collaboration easier.</p>"},{"location":"dev-guide/code-style/#general-principles","title":"General Principles","text":"<ul> <li>Readability: Code should be easy to read and understand</li> <li>Simplicity: Prefer simple solutions over complex ones</li> <li>Consistency: Follow established patterns in the codebase</li> <li>Documentation: Document code thoroughly, especially public APIs</li> </ul>"},{"location":"dev-guide/code-style/#go-style-guide","title":"Go Style Guide","text":"<p>NoIdea follows the official Go style guidelines with some project-specific additions.</p>"},{"location":"dev-guide/code-style/#formatting","title":"Formatting","text":"<ul> <li>Use <code>gofmt</code> or <code>goimports</code> to format your code</li> <li>Line length should be kept reasonable (aim for under 100 characters)</li> <li>Group imports in the standard Go way:</li> <li>Standard library imports</li> <li>Third-party imports</li> <li>Local project imports</li> </ul> <pre><code>import (\n    \"fmt\"\n    \"strings\"\n\n    \"github.com/fatih/color\"\n    \"github.com/spf13/cobra\"\n\n    \"github.com/AccursedGalaxy/noidea/internal/config\"\n)\n</code></pre>"},{"location":"dev-guide/code-style/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Use meaningful, descriptive names</li> <li>Follow Go conventions:</li> <li><code>CamelCase</code> for exported names</li> <li><code>mixedCase</code> for non-exported names</li> <li><code>acronyms</code> should be all caps: <code>HTTPClient</code> not <code>HttpClient</code></li> <li>Package names should be short, concise, and lowercase</li> </ul>"},{"location":"dev-guide/code-style/#error-handling","title":"Error Handling","text":"<ul> <li>Always check errors and handle them appropriately</li> <li>Use descriptive error messages</li> <li>Consider using custom error types for domain-specific errors</li> <li>Wrap errors with context when propagating them up the call stack</li> </ul> <pre><code>if err != nil {\n    return fmt.Errorf(\"failed to load configuration: %w\", err)\n}\n</code></pre>"},{"location":"dev-guide/code-style/#comments","title":"Comments","text":"<ul> <li>Write comments for all exported functions, types, and constants</li> <li>Follow the Go convention for documentation comments:</li> </ul> <pre><code>// GetRandomFace returns a random Moai face string.\n// It selects from a predefined list of ASCII Moai faces.\nfunc GetRandomFace() string {\n    // Implementation\n}\n</code></pre>"},{"location":"dev-guide/code-style/#project-specific-conventions","title":"Project-Specific Conventions","text":""},{"location":"dev-guide/code-style/#command-structure","title":"Command Structure","text":"<p>All CLI commands should:</p> <ol> <li>Have a descriptive <code>Use</code> field</li> <li>Include a short and long description</li> <li>Handle errors consistently</li> <li>Follow the established command pattern</li> </ol> <pre><code>var exampleCmd = &amp;cobra.Command{\n    Use:   \"example [options]\",\n    Short: \"Short description of command\",\n    Long:  `A longer description that explains the command in detail.`,\n    Run: func(cmd *cobra.Command, args []string) {\n        // Command implementation\n        if err := doSomething(); err != nil {\n            fmt.Println(color.RedString(\"Error:\"), err)\n            return\n        }\n    },\n}\n</code></pre>"},{"location":"dev-guide/code-style/#configuration-handling","title":"Configuration Handling","text":"<ul> <li>Configuration should be accessed through the <code>config</code> package</li> <li>Don't use hardcoded configuration values</li> <li>Respect user-defined settings</li> </ul>"},{"location":"dev-guide/code-style/#feedback-and-ui","title":"Feedback and UI","text":"<ul> <li>Use the <code>color</code> package consistently for terminal output</li> <li>Follow the established color scheme:</li> <li>Red for errors</li> <li>Yellow for warnings</li> <li>Green for success</li> <li>Cyan for information</li> <li>White for normal output</li> </ul>"},{"location":"dev-guide/code-style/#code-organization","title":"Code Organization","text":""},{"location":"dev-guide/code-style/#file-structure","title":"File Structure","text":"<ul> <li>Place related functionality in the same package</li> <li>Break large files into smaller, focused ones</li> <li>Keep the <code>main</code> package minimal, delegating to other packages</li> </ul>"},{"location":"dev-guide/code-style/#package-organization","title":"Package Organization","text":"<p>NoIdea uses the following package organization:</p> <ul> <li><code>cmd/</code>: CLI commands</li> <li><code>internal/</code>: Internal packages (not exported)</li> <li><code>config/</code>: Configuration handling</li> <li><code>feedback/</code>: Feedback generation</li> <li><code>git/</code>: Git operations</li> <li><code>moai/</code>: Moai face and local feedback</li> <li><code>plugin/</code>: Plugin system</li> <li>...</li> <li><code>scripts/</code>: Helper scripts and Git hooks</li> </ul>"},{"location":"dev-guide/code-style/#testing","title":"Testing","text":"<ul> <li>Write tests for all new functionality</li> <li>Use table-driven tests when appropriate</li> <li>Mock external dependencies</li> <li>Aim for high test coverage, especially for critical components</li> </ul> <pre><code>func TestGetRandomFace(t *testing.T) {\n    face := GetRandomFace()\n    if face == \"\" {\n        t.Error(\"Expected non-empty face, got empty string\")\n    }\n\n    // Check if face is in the valid faces list\n    validFace := false\n    for _, f := range moaiFaces {\n        if f == face {\n            validFace = true\n            break\n        }\n    }\n\n    if !validFace {\n        t.Errorf(\"Got unexpected face: %s\", face)\n    }\n}\n</code></pre>"},{"location":"dev-guide/code-style/#linting-and-static-analysis","title":"Linting and Static Analysis","text":"<p>NoIdea uses the following tools for code quality:</p> <ul> <li><code>golangci-lint</code> with custom configuration in <code>.golangci.yml</code></li> <li>Git hooks that run linters automatically</li> </ul> <p>Make sure to run linters before submitting code:</p> <pre><code>make lint\n</code></pre>"},{"location":"dev-guide/code-style/#plugin-development","title":"Plugin Development","text":"<p>When developing plugins, follow these additional guidelines:</p> <ul> <li>Use interfaces defined in the <code>plugin</code> package</li> <li>Follow the plugin lifecycle correctly</li> <li>Provide clear error messages</li> <li>Include thorough documentation</li> <li>Respect resource limitations</li> </ul> <p>See the Plugin System documentation for more details. </p>"},{"location":"dev-guide/core-components/","title":"Core Components","text":"<p>This document provides a detailed overview of the core components that make up NoIdea, explaining their purpose, architecture, and interactions.</p>"},{"location":"dev-guide/core-components/#feedback-engine","title":"Feedback Engine","text":"<p>The feedback engine is the heart of NoIdea's AI capabilities, responsible for generating commit suggestions, feedback, and summaries.</p>"},{"location":"dev-guide/core-components/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                Feedback Engine              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    Local    \u2502    Unified    \u2502    Provider   \u2502\n\u2502   Engine    \u2502    Engine     \u2502   Adapters    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u25b2               \u25b2               \u25b2\n       \u2502               \u2502               \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502               \u2502               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Personality \u2502 \u2502 Commit Data \u2502 \u2502    LLM      \u2502\n\u2502   System    \u2502 \u2502  Context    \u2502 \u2502  Providers  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/core-components/#key-components","title":"Key Components","text":""},{"location":"dev-guide/core-components/#local-engine","title":"Local Engine","text":"<p>The local engine provides feedback without requiring API access. It uses predefined templates and simple pattern matching.</p> <p>Key Files: - <code>internal/feedback/local.go</code>: Implementation of the local feedback engine - <code>internal/moai/faces.go</code>: Moai face definitions and templates</p>"},{"location":"dev-guide/core-components/#unified-engine","title":"Unified Engine","text":"<p>The unified engine is responsible for interacting with LLM providers like xAI, OpenAI, and DeepSeek.</p> <p>Key Files: - <code>internal/feedback/unified.go</code>: Unified API for different LLM providers - <code>internal/feedback/engine.go</code>: Common engine interface definitions</p>"},{"location":"dev-guide/core-components/#personality-system","title":"Personality System","text":"<p>The personality system manages different AI personas, allowing customized feedback styles.</p> <p>Key Files: - <code>internal/personality/personalities.go</code>: Personality definition and loading - <code>personalities.toml.example</code>: Example personality configuration</p>"},{"location":"dev-guide/core-components/#configuration-system","title":"Configuration System","text":"<p>The configuration system manages user preferences, API credentials, and behavior settings.</p>"},{"location":"dev-guide/core-components/#architecture_1","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             Configuration System            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Config    \u2502    Secure     \u2502  Environment  \u2502\n\u2502   Files     \u2502    Storage    \u2502   Variables   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u25b2               \u25b2               \u25b2\n       \u2502               \u2502               \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502 Configuration \u2502\n               \u2502    Manager    \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u25b2\n                       \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502  Application  \u2502\n               \u2502    Components \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/core-components/#key-components_1","title":"Key Components","text":""},{"location":"dev-guide/core-components/#configuration-files","title":"Configuration Files","text":"<p>Configuration files store user preferences in TOML format.</p> <p>Key Files: - <code>internal/config/config.go</code>: Configuration loading and parsing - <code>internal/config/default.go</code>: Default configuration values</p>"},{"location":"dev-guide/core-components/#secure-storage","title":"Secure Storage","text":"<p>Secure storage manages sensitive information like API keys.</p> <p>Key Files: - <code>internal/secure/keyring.go</code>: Secure credential storage - <code>internal/secure/apikey.go</code>: API key validation and management</p>"},{"location":"dev-guide/core-components/#command-system","title":"Command System","text":"<p>The command system provides the CLI interface for NoIdea, built on the Cobra library.</p>"},{"location":"dev-guide/core-components/#architecture_2","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                Command System               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502    Root     \u2502   Feature     \u2502   Utility     \u2502\n\u2502   Command   \u2502   Commands    \u2502   Commands    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u25b2               \u25b2               \u25b2\n       \u2502               \u2502               \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502    Cobra      \u2502\n               \u2502   Framework   \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/core-components/#key-components_2","title":"Key Components","text":""},{"location":"dev-guide/core-components/#root-command","title":"Root Command","text":"<p>The root command is the entry point for all CLI operations.</p> <p>Key Files: - <code>cmd/root.go</code>: Root command definition and global flags</p>"},{"location":"dev-guide/core-components/#feature-commands","title":"Feature Commands","text":"<p>Feature commands implement core NoIdea functionality.</p> <p>Key Files: - <code>cmd/suggest.go</code>: Commit suggestion command - <code>cmd/moai.go</code>: Feedback command - <code>cmd/summary.go</code>: Summary generation command</p>"},{"location":"dev-guide/core-components/#utility-commands","title":"Utility Commands","text":"<p>Utility commands provide supporting functionality.</p> <p>Key Files: - <code>cmd/config.go</code>: Configuration management - <code>cmd/init.go</code>: Repository initialization - <code>cmd/update.go</code>: Self-update functionality</p>"},{"location":"dev-guide/core-components/#git-integration","title":"Git Integration","text":"<p>The Git integration system interacts with Git repositories to analyze changes and history.</p>"},{"location":"dev-guide/core-components/#architecture_3","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502               Git Integration               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Command   \u2502    History    \u2502     Diff      \u2502\n\u2502  Execution  \u2502    Analysis   \u2502    Parsing    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u25b2               \u25b2               \u25b2\n       \u2502               \u2502               \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502  Application  \u2502\n               \u2502    Logic      \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/core-components/#key-components_3","title":"Key Components","text":""},{"location":"dev-guide/core-components/#command-execution","title":"Command Execution","text":"<p>Executes Git commands and processes results.</p> <p>Key Files: - <code>internal/git/git.go</code>: Git command execution - <code>internal/git/repo.go</code>: Repository interaction</p>"},{"location":"dev-guide/core-components/#history-analysis","title":"History Analysis","text":"<p>Analyzes Git history for patterns and insights.</p> <p>Key Files: - <code>internal/history/collector.go</code>: Gathers commit history data - <code>internal/history/analysis.go</code>: Analyzes commit patterns</p>"},{"location":"dev-guide/core-components/#github-integration","title":"GitHub Integration","text":"<p>The GitHub integration system interacts with the GitHub API for managing releases and workflows.</p>"},{"location":"dev-guide/core-components/#architecture_4","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              GitHub Integration             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502     Auth     \u2502    Release    \u2502   Workflow   \u2502\n\u2502    Manager   \u2502   Management  \u2502    Status    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u25b2               \u25b2               \u25b2\n       \u2502               \u2502               \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502  GitHub API   \u2502\n               \u2502    Client     \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/core-components/#key-components_4","title":"Key Components","text":""},{"location":"dev-guide/core-components/#auth-manager","title":"Auth Manager","text":"<p>Manages GitHub authentication and credentials.</p> <p>Key Files: - <code>internal/github/auth.go</code>: Authentication handling - <code>cmd/github.go</code>: GitHub command implementation</p>"},{"location":"dev-guide/core-components/#release-management","title":"Release Management","text":"<p>Manages GitHub releases and release notes.</p> <p>Key Files: - <code>internal/github/release.go</code>: Release creation and management - <code>internal/releaseai/generator.go</code>: AI-enhanced release notes</p>"},{"location":"dev-guide/core-components/#plugin-system-future","title":"Plugin System (Future)","text":"<p>The plugin system will allow extending NoIdea with custom functionality.</p>"},{"location":"dev-guide/core-components/#architecture_5","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                Plugin System                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502   Plugin    \u2502    Plugin     \u2502    Hook       \u2502\n\u2502  Registry   \u2502    Loader     \u2502    Points     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u25b2               \u25b2               \u25b2\n       \u2502               \u2502               \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502    Plugin     \u2502\n               \u2502  Interfaces   \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                       \u25b2\n                       \u2502\n               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n               \u2502   External    \u2502\n               \u2502    Plugins    \u2502\n               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/core-components/#key-components_5","title":"Key Components","text":""},{"location":"dev-guide/core-components/#plugin-registry","title":"Plugin Registry","text":"<p>Manages plugin registration and discovery.</p> <p>Future Files: - <code>internal/plugin/registry.go</code>: Plugin registration and management</p>"},{"location":"dev-guide/core-components/#plugin-loader","title":"Plugin Loader","text":"<p>Loads plugins from various sources.</p> <p>Future Files: - <code>internal/plugin/loader.go</code>: Plugin loading mechanisms</p>"},{"location":"dev-guide/core-components/#hook-points","title":"Hook Points","text":"<p>Defines extension points for plugins.</p> <p>Future Files: - <code>internal/plugin/hooks.go</code>: Hook point definitions - <code>internal/plugin/events.go</code>: Event system for plugins</p>"},{"location":"dev-guide/core-components/#interaction-between-components","title":"Interaction Between Components","text":""},{"location":"dev-guide/core-components/#commit-suggestion-flow","title":"Commit Suggestion Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Suggest \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Git     \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Feedback  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Output  \u2502\n\u2502  Command \u2502     \u2502  System   \u2502     \u2502    Engine   \u2502     \u2502  Renderer \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                \u2502                 \u2502                   \u2502\n      \u2502                \u2502                 \u2502                   \u2502\n      \u25bc                \u25bc                 \u25bc                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Config  \u2502     \u2502  History  \u2502     \u2502 Personality \u2502     \u2502  Terminal \u2502\n\u2502  System  \u2502     \u2502  Analysis \u2502     \u2502   System    \u2502     \u2502   Output  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/core-components/#github-release-flow","title":"GitHub Release Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  GitHub  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Auth    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Release   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 ReleaseAI \u2502\n\u2502  Command \u2502     \u2502  Manager  \u2502     \u2502   Manager   \u2502     \u2502 Generator \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                \u2502                 \u2502                   \u2502\n      \u2502                \u2502                 \u2502                   \u2502\n      \u25bc                \u25bc                 \u25bc                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Config  \u2502     \u2502  Secure   \u2502     \u2502   GitHub    \u2502     \u2502   Output  \u2502\n\u2502  System  \u2502     \u2502  Storage  \u2502     \u2502     API     \u2502     \u2502  Renderer \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/core-components/#future-development","title":"Future Development","text":"<p>Future development of core components will focus on:</p> <ol> <li>Modularization: Further separating components for improved maintainability</li> <li>Plugin Support: Adding robust plugin infrastructure</li> <li>API Stability: Creating stable APIs for plugin developers</li> <li>Performance: Optimizing performance for large repositories</li> <li>Additional Providers: Supporting more LLM providers</li> </ol> <p>These core components work together to create a cohesive system that provides intelligent Git assistance while maintaining a modular, extensible architecture. </p>"},{"location":"dev-guide/overview/","title":"Developer Guide","text":"<p>Welcome to the noidea developer documentation. This section provides information for contributors and developers who want to understand or extend noidea's functionality.</p>"},{"location":"dev-guide/overview/#project-architecture","title":"Project Architecture","text":"<p>noidea is written in Go and organized into several key components:</p> <ul> <li>cmd: Command-line interface and entry points</li> <li>internal: Core functionality modules</li> <li>scripts: Git hooks and installation scripts</li> </ul> <pre><code>noidea/\n\u251c\u2500\u2500 cmd/               # Commands implementation\n\u2502   \u251c\u2500\u2500 root.go        # Base command and CLI setup\n\u2502   \u251c\u2500\u2500 suggest.go     # Commit suggestion command\n\u2502   \u251c\u2500\u2500 moai.go        # Feedback command\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 internal/          # Internal packages\n\u2502   \u251c\u2500\u2500 config/        # Configuration handling\n\u2502   \u251c\u2500\u2500 feedback/      # Feedback generation\n\u2502   \u251c\u2500\u2500 git/           # Git operations\n\u2502   \u251c\u2500\u2500 history/       # Commit history analysis\n\u2502   \u251c\u2500\u2500 moai/          # Moai face and local feedback\n\u2502   \u251c\u2500\u2500 personality/   # AI personality system\n\u2502   \u2514\u2500\u2500 secure/        # Secure API key storage\n\u251c\u2500\u2500 scripts/           # Installation and Git hooks\n\u2514\u2500\u2500 docs/              # Documentation\n</code></pre>"},{"location":"dev-guide/overview/#key-components","title":"Key Components","text":""},{"location":"dev-guide/overview/#command-layer","title":"Command Layer","text":"<p>The <code>cmd</code> package uses the Cobra library to implement the CLI commands. Each command is defined in its own file.</p>"},{"location":"dev-guide/overview/#internal-packages","title":"Internal Packages","text":"<ul> <li>config: Handles reading/writing configuration from files and environment</li> <li>feedback: Generates AI-powered feedback through different providers</li> <li>git: Manages Git operations like getting diffs and commit history</li> <li>history: Analyzes commit patterns and statistics</li> <li>moai: Manages Moai faces and local feedback generation</li> <li>personality: Handles the AI personality system and templates</li> <li>secure: Manages secure storage of API keys</li> </ul>"},{"location":"dev-guide/overview/#getting-started-with-development","title":"Getting Started with Development","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/AccursedGalaxy/noidea.git\ncd noidea\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>go mod download\n</code></pre></p> </li> <li> <p>Build the project:    <pre><code>go build\n</code></pre></p> </li> <li> <p>Run tests:    <pre><code>go test ./...\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/overview/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a feature branch:    <pre><code>git checkout -b feature/my-new-feature\n</code></pre></p> </li> <li> <p>Make your changes and test them:    <pre><code>go build &amp;&amp; ./noidea &lt;command&gt;\n</code></pre></p> </li> <li> <p>Formatting and Linting:    <pre><code># Format the code (also happens automatically on commit)\nmake format\n\n# Run linters to check code quality\nmake script-lint\n\n# Check dependencies\nmake deps\n</code></pre></p> </li> </ol> <p>The project uses Git hooks to automatically format and lint your code when committing:    - Pre-commit hook: Automatically runs <code>go mod tidy</code>, formats code, organizes imports, and lints    - Pre-push hook: Runs tests before allowing a push to remote</p> <ol> <li>Commit your changes:    <pre><code>git add .\ngit commit -m \"Your commit message\"\n</code></pre>    The pre-commit hook will automatically:</li> <li>Format code with goimports and gofmt</li> <li>Organize imports consistently</li> <li>Run linters to catch common issues</li> <li> <p>Add formatted files to your commit</p> </li> <li> <p>Push your changes:    <pre><code>git push origin feature/my-new-feature\n</code></pre>    The pre-push hook will run tests to ensure nothing breaks</p> </li> <li> <p>Submit a pull request:</p> </li> <li>Ensure all tests pass</li> <li>Update documentation if needed</li> <li>Follow the code style of the project</li> </ol>"},{"location":"dev-guide/overview/#useful-make-commands","title":"Useful Make Commands","text":"<pre><code># Set up Git hooks (if not already set up)\nmake setup-hooks\n\n# Format code manually\nmake format\n\n# Run linters on project files\nmake script-lint\n\n# Run tests\nmake test\n\n# Build the project\nmake build\n</code></pre>"},{"location":"dev-guide/overview/#documentation","title":"Documentation","text":"<p>Documentation is built using MkDocs with the Material theme.</p> <p>To preview the documentation locally:</p> <pre><code># Install mkdocs and the material theme\npip install mkdocs mkdocs-material\n\n# Serve the documentation locally\nmkdocs serve\n</code></pre>"},{"location":"dev-guide/overview/#more-developer-resources","title":"More Developer Resources","text":"<ul> <li>Architecture - Detailed architecture documentation</li> <li>Contributing - How to contribute to noidea </li> </ul>"},{"location":"dev-guide/project-structure/","title":"Project Structure","text":"<p>This document outlines the organization and structure of the NoIdea codebase, helping developers understand where to find specific functionality and how components relate to each other.</p>"},{"location":"dev-guide/project-structure/#directory-structure","title":"Directory Structure","text":"<pre><code>noidea/\n\u251c\u2500\u2500 .github/               # GitHub-related files\n\u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/    # Issue templates\n\u2502   \u2514\u2500\u2500 workflows/         # GitHub Actions workflows\n\u251c\u2500\u2500 .golangci-lint/        # Linting configuration\n\u251c\u2500\u2500 assets/                # Images and static assets\n\u251c\u2500\u2500 cmd/                   # CLI commands implementation\n\u251c\u2500\u2500 docs/                  # Documentation\n\u2502   \u251c\u2500\u2500 assets/            # Documentation assets\n\u2502   \u251c\u2500\u2500 blog/              # Blog posts\n\u2502   \u251c\u2500\u2500 dev-guide/         # Developer documentation\n\u2502   \u251c\u2500\u2500 stylesheets/       # Documentation CSS\n\u2502   \u2514\u2500\u2500 user-guide/        # User documentation\n\u251c\u2500\u2500 internal/              # Internal packages\n\u2502   \u251c\u2500\u2500 config/            # Configuration handling\n\u2502   \u251c\u2500\u2500 feedback/          # Feedback generation\n\u2502   \u251c\u2500\u2500 git/               # Git operations\n\u2502   \u251c\u2500\u2500 github/            # GitHub integration\n\u2502   \u251c\u2500\u2500 history/           # Commit history analysis\n\u2502   \u251c\u2500\u2500 moai/              # Moai face and feedback\n\u2502   \u251c\u2500\u2500 personality/       # AI personality system\n\u2502   \u251c\u2500\u2500 plugin/            # Plugin system (future)\n\u2502   \u251c\u2500\u2500 releaseai/         # Release note generation\n\u2502   \u2514\u2500\u2500 secure/            # Secure storage\n\u251c\u2500\u2500 scripts/               # Helper scripts and Git hooks\n\u2514\u2500\u2500 tests/                 # Test infrastructure\n    \u251c\u2500\u2500 results/           # Test results\n    \u251c\u2500\u2500 test_repo/         # Test Git repository\n    \u2514\u2500\u2500 test_suites/       # Test scenarios\n</code></pre>"},{"location":"dev-guide/project-structure/#key-components","title":"Key Components","text":""},{"location":"dev-guide/project-structure/#entry-point","title":"Entry Point","text":"<ul> <li><code>main.go</code>: The application entry point that initializes the CLI</li> </ul>"},{"location":"dev-guide/project-structure/#command-layer","title":"Command Layer","text":"<p>The <code>cmd/</code> directory contains all CLI commands defined using the Cobra library:</p> <ul> <li><code>root.go</code>: Base command and shared functionality</li> <li><code>suggest.go</code>: Commit message suggestion command</li> <li><code>moai.go</code>: Post-commit feedback command</li> <li><code>summary.go</code>: Git history summarization</li> <li><code>config.go</code>: Configuration management</li> <li><code>github.go</code>: GitHub integration</li> <li><code>init.go</code>: Repository initialization</li> <li><code>update.go</code>: Self-update functionality</li> </ul>"},{"location":"dev-guide/project-structure/#internal-packages","title":"Internal Packages","text":"<p>The <code>internal/</code> directory contains packages with core functionality:</p>"},{"location":"dev-guide/project-structure/#configuration-internalconfig","title":"Configuration (<code>internal/config/</code>)","text":"<p>Handles loading, saving, and validating configuration from various sources: - Environment variables - Configuration files - Command-line flags</p>"},{"location":"dev-guide/project-structure/#feedback-internalfeedback","title":"Feedback (<code>internal/feedback/</code>)","text":"<p>Generates AI-powered feedback: - Local feedback engine (no AI required) - Unified feedback engine (works with multiple LLM providers) - Different feedback types (commit suggestions, commit feedback, summaries)</p>"},{"location":"dev-guide/project-structure/#git-operations-internalgit","title":"Git Operations (<code>internal/git/</code>)","text":"<p>Abstracts Git operations: - Getting diffs - Retrieving commit history - Working with branches</p>"},{"location":"dev-guide/project-structure/#github-integration-internalgithub","title":"GitHub Integration (<code>internal/github/</code>)","text":"<p>Handles GitHub API interactions: - Authentication - Release management - Release note generation - Workflow status checks</p>"},{"location":"dev-guide/project-structure/#history-analysis-internalhistory","title":"History Analysis (<code>internal/history/</code>)","text":"<p>Analyzes Git commit patterns: - Commit statistics - Time-based patterns - Author patterns - Commit message analysis</p>"},{"location":"dev-guide/project-structure/#moai-internalmoai","title":"Moai (<code>internal/moai/</code>)","text":"<p>Manages the Moai face system: - ASCII Moai faces - Local feedback templates - Face selection based on context</p>"},{"location":"dev-guide/project-structure/#personality-internalpersonality","title":"Personality (<code>internal/personality/</code>)","text":"<p>Implements the AI personality system: - Loading personality definitions - Managing context and prompts - Personality selection</p>"},{"location":"dev-guide/project-structure/#security-internalsecure","title":"Security (<code>internal/secure/</code>)","text":"<p>Provides secure storage for sensitive information: - API key management - Secure credential storage - Environment variable handling</p>"},{"location":"dev-guide/project-structure/#scripts","title":"Scripts","text":"<p>The <code>scripts/</code> directory contains helper scripts: - Git hooks - Installation scripts - Release management - Document generation</p>"},{"location":"dev-guide/project-structure/#code-flow","title":"Code Flow","text":""},{"location":"dev-guide/project-structure/#commit-suggestion-flow","title":"Commit Suggestion Flow","text":"<ol> <li>User runs <code>noidea suggest</code></li> <li>Command parsed in <code>cmd/suggest.go</code></li> <li>Git changes retrieved via <code>internal/git</code></li> <li>Configuration loaded from <code>internal/config</code></li> <li>Feedback engine created in <code>internal/feedback</code></li> <li>AI provider selected based on config</li> <li>Suggestion generated and displayed to user</li> </ol>"},{"location":"dev-guide/project-structure/#moai-feedback-flow","title":"Moai Feedback Flow","text":"<ol> <li>User makes a Git commit</li> <li>Post-commit hook runs <code>noidea moai</code></li> <li>Command handled in <code>cmd/moai.go</code></li> <li>Last commit retrieved via <code>internal/git</code></li> <li>Moai face selected from <code>internal/moai</code></li> <li>Feedback generated via <code>internal/feedback</code></li> <li>Feedback displayed to user</li> </ol>"},{"location":"dev-guide/project-structure/#plugin-architecture","title":"Plugin Architecture","text":"<p>The future plugin system will be centered around the <code>internal/plugin</code> package:</p> <ul> <li>Plugin registry for managing plugins</li> <li>Plugin loader for loading different plugin types</li> <li>Core interfaces for plugin developers</li> <li>Event system for plugin hooks</li> </ul> <p>Plugins will integrate with NoIdea through several hook points: - Command hooks - Pre/post commit hooks - Feedback hooks - UI hooks - Data hooks</p>"},{"location":"dev-guide/project-structure/#build-system","title":"Build System","text":"<p>NoIdea uses a <code>Makefile</code> for build automation: - <code>make build</code>: Builds the binary - <code>make install</code>: Installs NoIdea - <code>make test</code>: Runs tests - <code>make lint</code>: Runs linters - <code>make release</code>: Creates release builds</p>"},{"location":"dev-guide/project-structure/#documentation","title":"Documentation","text":"<p>Documentation is built using MkDocs with the Material theme: - User guide for end users - Developer guide for contributors - Blog posts for announcements and tips</p>"},{"location":"dev-guide/project-structure/#future-structure","title":"Future Structure","text":"<p>As NoIdea evolves, the following structural changes are planned:</p> <ol> <li>Add the <code>internal/plugin</code> directory for the plugin system</li> <li>Add a dedicated <code>api</code> package for stable API interfaces</li> <li>Implement a modular LLM provider system</li> <li>Enhance the GitHub integration capabilities </li> </ol>"},{"location":"dev-guide/testing/","title":"Testing Guide","text":"<p>This document provides guidelines and best practices for testing NoIdea components and plugins.</p>"},{"location":"dev-guide/testing/#overview","title":"Overview","text":"<p>Testing is a critical part of ensuring NoIdea's reliability and quality. The project uses a combination of:</p> <ul> <li>Unit tests</li> <li>Integration tests</li> <li>Simulation tests</li> <li>Linting and static analysis</li> </ul>"},{"location":"dev-guide/testing/#test-directory-structure","title":"Test Directory Structure","text":"<p>The NoIdea testing infrastructure is organized as follows:</p> <pre><code>tests/\n\u251c\u2500\u2500 test_suites/          # Test scenarios and configuration\n\u251c\u2500\u2500 results/              # Test outputs and reports\n\u251c\u2500\u2500 test_repo/            # Test Git repository\n\u251c\u2500\u2500 simulation_tester.go  # Automated test runner\n\u251c\u2500\u2500 run_tests.sh          # Test executor script\n\u2514\u2500\u2500 setup_test_repo.sh    # Repository setup script\n</code></pre>"},{"location":"dev-guide/testing/#unit-testing","title":"Unit Testing","text":"<p>Unit tests should be added for all new functionality. Follow these guidelines for unit tests:</p>"},{"location":"dev-guide/testing/#test-file-naming","title":"Test File Naming","text":"<ul> <li>Test files should be named <code>*_test.go</code></li> <li>Place test files in the same package as the code being tested</li> </ul>"},{"location":"dev-guide/testing/#test-function-naming","title":"Test Function Naming","text":"<p>Use descriptive names for test functions following the convention:</p> <pre><code>func TestFeature_Scenario(t *testing.T) {\n    // Test implementation\n}\n</code></pre> <p>For example:</p> <pre><code>func TestGetRandomFace_ReturnsValidFace(t *testing.T) {\n    // Test implementation\n}\n</code></pre>"},{"location":"dev-guide/testing/#table-driven-tests","title":"Table-Driven Tests","text":"<p>Use table-driven tests for testing multiple inputs and expected outputs:</p> <pre><code>func TestProcessFeedback(t *testing.T) {\n    tests := []struct {\n        name     string\n        input    string\n        expected string\n    }{\n        {\n            name:     \"basic feedback\",\n            input:    \"test message\",\n            expected: \"processed test message\",\n        },\n        {\n            name:     \"empty input\",\n            input:    \"\",\n            expected: \"\",\n        },\n        // More test cases...\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            result := ProcessFeedback(tt.input)\n            if result != tt.expected {\n                t.Errorf(\"ProcessFeedback(%q) = %q, want %q\", tt.input, result, tt.expected)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"dev-guide/testing/#mocking","title":"Mocking","text":"<p>Use mocks for external dependencies like:</p> <ul> <li>Git operations</li> <li>API calls</li> <li>File system operations</li> </ul> <p>You can create mocks manually or use a mocking library:</p> <pre><code>// MockGitClient implements the GitClient interface for testing\ntype MockGitClient struct {\n    CommitMessages []string\n    ShouldError    bool\n}\n\nfunc (m *MockGitClient) GetLastCommitMessage() (string, error) {\n    if m.ShouldError {\n        return \"\", errors.New(\"mock error\")\n    }\n    if len(m.CommitMessages) &gt; 0 {\n        return m.CommitMessages[len(m.CommitMessages)-1], nil\n    }\n    return \"\", nil\n}\n</code></pre>"},{"location":"dev-guide/testing/#integration-tests","title":"Integration Tests","text":"<p>Integration tests verify that different components work together correctly. For NoIdea, these typically involve:</p> <ol> <li>Setting up a test Git repository</li> <li>Running commands on that repository</li> <li>Verifying the outcomes</li> </ol> <p>The <code>tests/test_repo/</code> directory contains a Git repository specifically for integration testing.</p>"},{"location":"dev-guide/testing/#running-integration-tests","title":"Running Integration Tests","text":"<p>Use the provided script to run integration tests:</p> <pre><code>./tests/run_tests.sh integration\n</code></pre>"},{"location":"dev-guide/testing/#simulation-tests","title":"Simulation Tests","text":"<p>NoIdea uses simulation tests to verify end-to-end functionality. The <code>simulation_tester.go</code> file contains a test runner that:</p> <ol> <li>Sets up a clean test environment</li> <li>Executes a series of Git and NoIdea commands</li> <li>Verifies the outputs match expected results</li> </ol>"},{"location":"dev-guide/testing/#test-suites","title":"Test Suites","text":"<p>Test suites are defined in JSON files in the <code>tests/test_suites/</code> directory:</p> <pre><code>{\n  \"name\": \"Basic Commit Flow\",\n  \"description\": \"Tests the basic commit suggestion and feedback flow\",\n  \"steps\": [\n    {\n      \"command\": \"git init\",\n      \"expected_output\": \"Initialized\"\n    },\n    {\n      \"command\": \"touch test.txt\",\n      \"expected_output\": \"\"\n    },\n    {\n      \"command\": \"git add test.txt\",\n      \"expected_output\": \"\"\n    },\n    {\n      \"command\": \"noidea suggest\",\n      \"expected_output_pattern\": \"Suggested commit message:\"\n    }\n    // More steps...\n  ]\n}\n</code></pre>"},{"location":"dev-guide/testing/#running-simulation-tests","title":"Running Simulation Tests","text":"<p>To run simulation tests:</p> <pre><code>./tests/run_tests.sh simulation\n</code></pre>"},{"location":"dev-guide/testing/#plugin-testing","title":"Plugin Testing","text":"<p>When developing plugins for NoIdea, follow these additional guidelines:</p>"},{"location":"dev-guide/testing/#plugin-unit-tests","title":"Plugin Unit Tests","text":"<p>Each plugin should have unit tests that verify:</p> <ol> <li>The plugin can be loaded successfully</li> <li>Core functionality works as expected</li> <li>The plugin handles errors gracefully</li> <li>The plugin cleans up resources properly</li> </ol>"},{"location":"dev-guide/testing/#plugin-integration-tests","title":"Plugin Integration Tests","text":"<p>Create integration tests that verify your plugin works correctly with NoIdea:</p> <pre><code>func TestMyPlugin_Integration(t *testing.T) {\n    // Setup\n    tmpDir := t.TempDir()\n    gitInit := exec.Command(\"git\", \"init\", tmpDir)\n    gitInit.Run()\n\n    // Run NoIdea with plugin\n    cmd := exec.Command(\"noidea\", \"--plugin\", \"my-plugin\", \"command\")\n    cmd.Dir = tmpDir\n    output, err := cmd.CombinedOutput()\n\n    // Verify results\n    if err != nil {\n        t.Errorf(\"Command failed: %v\", err)\n    }\n    if !strings.Contains(string(output), \"Expected output\") {\n        t.Errorf(\"Output did not contain expected string\")\n    }\n}\n</code></pre>"},{"location":"dev-guide/testing/#test-coverage","title":"Test Coverage","text":"<p>Aim for high test coverage, especially for critical components. You can check the current test coverage with:</p> <pre><code>go test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n</code></pre>"},{"location":"dev-guide/testing/#continuous-integration","title":"Continuous Integration","text":"<p>NoIdea uses GitHub Actions for continuous integration. The CI workflow:</p> <ol> <li>Runs all unit tests</li> <li>Verifies code formatting</li> <li>Runs linters</li> <li>Builds the project for multiple platforms</li> </ol> <p>See the <code>.github/workflows/</code> directory for the complete CI configuration.</p>"},{"location":"dev-guide/testing/#debugging-tests","title":"Debugging Tests","text":"<p>When debugging failing tests:</p> <ol> <li>Use the <code>-v</code> flag for verbose output: <code>go test -v ./...</code></li> <li>Use <code>t.Logf()</code> to print debug information</li> <li>For simulation tests, check the <code>tests/results/</code> directory for detailed logs</li> </ol>"},{"location":"dev-guide/testing/#adding-new-tests","title":"Adding New Tests","text":"<p>When adding new features:</p> <ol> <li>Add unit tests for all new functions</li> <li>Update or add integration tests if the feature changes behavior</li> <li>Consider adding a new simulation test suite for significant features</li> </ol> <p>Following these guidelines will help ensure NoIdea remains stable and reliable as it evolves. </p>"},{"location":"dev-guide/plugins/","title":"NoIdea Plugin System","text":"<p>Welcome to the NoIdea plugin system documentation. This section provides comprehensive information about the plugin architecture, interface specifications, and examples for developers who want to create plugins for NoIdea.</p>"},{"location":"dev-guide/plugins/#overview","title":"Overview","text":"<p>The NoIdea plugin system allows developers to extend the functionality of the CLI tool with custom commands, feedback mechanisms, UI elements, and more. Plugins are modular, maintainable, and designed to enhance the user experience.</p>"},{"location":"dev-guide/plugins/#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Plugin Architecture - Detailed architecture and design principles</li> <li>Interface Specifications - Core interfaces and types for plugin development</li> <li>Plugin Examples - Practical examples for developing various types of plugins</li> </ul>"},{"location":"dev-guide/plugins/#quick-start","title":"Quick Start","text":"<p>To create a basic NoIdea plugin:</p> <ol> <li> <p>Create a new Go module:    <pre><code>mkdir my-noidea-plugin\ncd my-noidea-plugin\ngo mod init github.com/yourusername/my-noidea-plugin\n</code></pre></p> </li> <li> <p>Add NoIdea as a dependency:    <pre><code>go get github.com/AccursedGalaxy/noidea\n</code></pre></p> </li> <li> <p>Create a basic plugin structure:    <pre><code>package main\n\nimport (\n    \"github.com/AccursedGalaxy/noidea/internal/plugin\"\n)\n\n// MyPlugin is a basic NoIdea plugin\ntype MyPlugin struct {\n    ctx plugin.PluginContext\n}\n\n// Info returns plugin metadata\nfunc (p *MyPlugin) Info() plugin.PluginInfo {\n    return plugin.PluginInfo{\n        Name:            \"my-plugin\",\n        Version:         \"1.0.0\",\n        Description:     \"My first NoIdea plugin\",\n        Author:          \"Your Name\",\n        MinNoideaVersion: \"v0.4.0\",\n    }\n}\n\n// Initialize sets up the plugin\nfunc (p *MyPlugin) Initialize(ctx plugin.PluginContext) error {\n    p.ctx = ctx\n    return nil\n}\n\n// Shutdown performs cleanup\nfunc (p *MyPlugin) Shutdown() error {\n    return nil\n}\n\n// Plugin entry point\nfunc CreatePlugin() plugin.Plugin {\n    return &amp;MyPlugin{}\n}\n</code></pre></p> </li> <li> <p>Build your plugin:    <pre><code>go build -buildmode=plugin -o my-plugin.so\n</code></pre></p> </li> <li> <p>Install your plugin:    <pre><code>mkdir -p ~/.noidea/plugins\ncp my-plugin.so ~/.noidea/plugins/\n</code></pre></p> </li> </ol>"},{"location":"dev-guide/plugins/#plugin-distribution","title":"Plugin Distribution","text":"<p>Plugins can be distributed as:</p> <ol> <li>Shared Object Files (.so): For direct installation</li> <li>Source Code: For users to build themselves</li> <li>Plugin Packages: (Future) For installation via the NoIdea plugin manager</li> </ol>"},{"location":"dev-guide/plugins/#community-plugins","title":"Community Plugins","text":"<p>We encourage the community to develop and share plugins for NoIdea. When your plugin is ready, consider submitting it to our upcoming plugin directory.</p>"},{"location":"dev-guide/plugins/#getting-help","title":"Getting Help","text":"<p>If you need assistance with plugin development, you can:</p> <ul> <li>Check the examples for practical guidance</li> <li>Review the interface specifications for technical details</li> <li>Join our community discussions on GitHub </li> </ul>"},{"location":"dev-guide/plugins/architecture/","title":"Plugin System Architecture","text":""},{"location":"dev-guide/plugins/architecture/#overview","title":"Overview","text":"<p>NoIdea's plugin system is designed to extend the functionality of the CLI tool in a modular, maintainable way. This document outlines the architectural foundation for the upcoming plugin system.</p>"},{"location":"dev-guide/plugins/architecture/#design-principles","title":"Design Principles","text":"<p>The plugin system follows these core principles:</p> <ol> <li>Simplicity: Plugins should be easy to create, install, and use</li> <li>Stability: The plugin API should be stable and backward compatible</li> <li>Isolation: Plugins should operate in isolation to prevent conflicts</li> <li>Performance: Plugin architecture should minimize overhead</li> <li>Discoverability: Users should be able to easily discover and manage plugins</li> </ol>"},{"location":"dev-guide/plugins/architecture/#plugin-system-components","title":"Plugin System Components","text":""},{"location":"dev-guide/plugins/architecture/#core-components","title":"Core Components","text":"<pre><code>noidea/\n\u251c\u2500\u2500 internal/\n\u2502   \u251c\u2500\u2500 plugin/           # Plugin infrastructure\n\u2502   \u2502   \u251c\u2500\u2500 registry.go   # Plugin registration and discovery\n\u2502   \u2502   \u251c\u2500\u2500 loader.go     # Plugin loading mechanisms\n\u2502   \u2502   \u251c\u2500\u2500 interface.go  # Core plugin interfaces\n\u2502   \u2502   \u2514\u2500\u2500 events.go     # Event system for plugins\n\u2514\u2500\u2500 cmd/\n    \u2514\u2500\u2500 plugin.go         # Plugin management commands\n</code></pre>"},{"location":"dev-guide/plugins/architecture/#interaction-flow","title":"Interaction Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 NoIdea Core \u2502 \u25c4\u2500\u2500\u2500\u2500\u25ba \u2502 Plugin System \u2502 \u25c4\u2500\u2500\u2500\u2500\u25ba \u2502 User Plugins   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                     \u2502                  \u2502\n             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n             \u2502 Event Hooks    \u2502 \u2502 Command Hooks  \u2502\n             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"dev-guide/plugins/architecture/#hook-points","title":"Hook Points","text":"<p>Plugins can integrate with NoIdea through the following hook points:</p> <ol> <li>Command Hooks: Add new commands or extend existing ones</li> <li>Pre/Post Commit Hooks: Execute before or after a commit operation</li> <li>Feedback Hooks: Extend or modify the feedback system</li> <li>UI Hooks: Add custom UI elements or modify existing UI</li> <li>Data Hooks: Access or modify Git metadata and analytics</li> </ol>"},{"location":"dev-guide/plugins/architecture/#plugin-lifecycle","title":"Plugin Lifecycle","text":"<p>Each plugin follows this lifecycle:</p> <ol> <li>Discovery: NoIdea finds plugins in designated directories</li> <li>Registration: Plugins register themselves with the plugin registry</li> <li>Initialization: The plugin system initializes plugins with appropriate context</li> <li>Operation: Plugins execute their functionality through hook points</li> <li>Deactivation: Plugins perform cleanup when deactivated</li> </ol>"},{"location":"dev-guide/plugins/architecture/#implementation-strategy","title":"Implementation Strategy","text":"<p>The plugin system will be implemented in phases:</p> <ol> <li>Phase 1: Define interfaces and basic infrastructure</li> <li>Phase 2: Implement core hook points and plugin loading</li> <li>Phase 3: Add plugin discovery and management commands</li> <li>Phase 4: Build example plugins and documentation</li> </ol>"},{"location":"dev-guide/plugins/architecture/#security-considerations","title":"Security Considerations","text":"<ul> <li>Plugins run with the same permissions as NoIdea itself</li> <li>Users should be cautioned about installing third-party plugins</li> <li>A future plugin marketplace will include security scanning</li> </ul>"},{"location":"dev-guide/plugins/architecture/#future-extensions","title":"Future Extensions","text":"<ul> <li>Plugin marketplace and discovery service</li> <li>Plugin versioning and dependency management</li> <li>Plugin configuration UI</li> <li>Remote plugin repository integration </li> </ul>"},{"location":"dev-guide/plugins/examples/","title":"Plugin Examples","text":"<p>This document provides practical examples for developing plugins for NoIdea. These examples demonstrate how to implement common plugin types and use the plugin interfaces effectively.</p>"},{"location":"dev-guide/plugins/examples/#basic-plugin-structure","title":"Basic Plugin Structure","text":"<p>Every NoIdea plugin follows this basic structure:</p> <pre><code>package main\n\nimport (\n    \"github.com/AccursedGalaxy/noidea/internal/plugin\"\n)\n\n// MyPlugin is a basic NoIdea plugin\ntype MyPlugin struct {\n    ctx    plugin.PluginContext\n    logger plugin.Logger\n    config plugin.PluginConfig\n}\n\n// Info returns plugin metadata\nfunc (p *MyPlugin) Info() plugin.PluginInfo {\n    return plugin.PluginInfo{\n        Name:            \"my-plugin\",\n        Version:         \"1.0.0\",\n        Description:     \"My first NoIdea plugin\",\n        Author:          \"Your Name\",\n        Website:         \"https://example.com/my-plugin\",\n        MinNoideaVersion: \"v0.4.0\",\n    }\n}\n\n// Initialize sets up the plugin\nfunc (p *MyPlugin) Initialize(ctx plugin.PluginContext) error {\n    p.ctx = ctx\n    p.logger = ctx.Logger()\n    p.config = ctx.Config()\n\n    // Register hooks\n    hooks := plugin.Hooks{\n        // Add your hooks here\n    }\n\n    return ctx.RegisterHooks(hooks)\n}\n\n// Shutdown performs cleanup\nfunc (p *MyPlugin) Shutdown() error {\n    p.logger.Info(\"Plugin shutting down\")\n    return nil\n}\n\n// Plugin entry point\nfunc CreatePlugin() plugin.Plugin {\n    return &amp;MyPlugin{}\n}\n</code></pre>"},{"location":"dev-guide/plugins/examples/#command-hook-example","title":"Command Hook Example","text":"<p>This example demonstrates how to add a new command to NoIdea:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/spf13/cobra\"\n    \"github.com/AccursedGalaxy/noidea/internal/plugin\"\n)\n\n// CommandPlugin adds custom commands\ntype CommandPlugin struct {\n    ctx plugin.PluginContext\n}\n\n// Info returns plugin metadata\nfunc (p *CommandPlugin) Info() plugin.PluginInfo {\n    return plugin.PluginInfo{\n        Name:            \"custom-command\",\n        Version:         \"1.0.0\",\n        Description:     \"Adds custom commands to NoIdea\",\n        Author:          \"Your Name\",\n        MinNoideaVersion: \"v0.4.0\",\n    }\n}\n\n// Initialize sets up the plugin\nfunc (p *CommandPlugin) Initialize(ctx plugin.PluginContext) error {\n    p.ctx = ctx\n\n    // Register command hooks\n    hooks := plugin.Hooks{\n        Command: &amp;CommandHooks{},\n    }\n\n    return ctx.RegisterHooks(hooks)\n}\n\n// Shutdown performs cleanup\nfunc (p *CommandPlugin) Shutdown() error {\n    return nil\n}\n\n// CommandHooks implements the CommandHooks interface\ntype CommandHooks struct{}\n\n// AddCommands returns custom commands\nfunc (h *CommandHooks) AddCommands() []plugin.Command {\n    statsCmd := &amp;cobra.Command{\n        Use:   \"custom-stats\",\n        Short: \"Display custom Git statistics\",\n        Run: func(cmd *cobra.Command, args []string) {\n            fmt.Println(\"Custom Git statistics:\")\n            fmt.Println(\"- Lines added: 1,024\")\n            fmt.Println(\"- Lines removed: 512\")\n            fmt.Println(\"- Commits: 48\")\n        },\n    }\n\n    return []plugin.Command{statsCmd}\n}\n\n// ExtendCommand modifies existing commands\nfunc (h *CommandHooks) ExtendCommand(name string, extender plugin.CommandExtender) error {\n    return nil // Not implementing command extension in this example\n}\n\n// Plugin entry point\nfunc CreatePlugin() plugin.Plugin {\n    return &amp;CommandPlugin{}\n}\n</code></pre>"},{"location":"dev-guide/plugins/examples/#feedback-hook-example","title":"Feedback Hook Example","text":"<p>This example shows how to modify the Moai feedback system:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"github.com/AccursedGalaxy/noidea/internal/plugin\"\n)\n\n// FeedbackPlugin customizes the feedback system\ntype FeedbackPlugin struct {\n    ctx plugin.PluginContext\n}\n\n// Info returns plugin metadata\nfunc (p *FeedbackPlugin) Info() plugin.PluginInfo {\n    return plugin.PluginInfo{\n        Name:            \"pirate-feedback\",\n        Version:         \"1.0.0\",\n        Description:     \"Adds pirate-themed feedback\",\n        Author:          \"Your Name\",\n        MinNoideaVersion: \"v0.4.0\",\n    }\n}\n\n// Initialize sets up the plugin\nfunc (p *FeedbackPlugin) Initialize(ctx plugin.PluginContext) error {\n    p.ctx = ctx\n\n    // Register feedback hooks\n    hooks := plugin.Hooks{\n        Feedback: &amp;PirateFeedbackHooks{},\n    }\n\n    return ctx.RegisterHooks(hooks)\n}\n\n// Shutdown performs cleanup\nfunc (p *FeedbackPlugin) Shutdown() error {\n    return nil\n}\n\n// PirateFeedbackHooks implements the FeedbackHooks interface\ntype PirateFeedbackHooks struct{}\n\n// ProcessFeedback modifies feedback messages\nfunc (h *PirateFeedbackHooks) ProcessFeedback(feedback string, commit string) (string, error) {\n    // Convert feedback to pirate speak\n    pirateFeedback := feedback\n\n    // Replace common words with pirate equivalents\n    replacements := map[string]string{\n        \"Hello\": \"Ahoy\",\n        \"yes\": \"aye\",\n        \"you\": \"ye\",\n        \"your\": \"yer\",\n        \"is\": \"be\",\n        \"are\": \"be\",\n        \"the\": \"th'\",\n        \"great\": \"mighty fine\",\n        \"good\": \"shipshape\",\n        \"bad\": \"scurvy\",\n    }\n\n    for word, replacement := range replacements {\n        pirateFeedback = strings.ReplaceAll(pirateFeedback, word, replacement)\n    }\n\n    // Add pirate suffix\n    pirateFeedback += \" Arrr! \ud83c\udff4\u200d\u2620\ufe0f\"\n\n    return pirateFeedback, nil\n}\n\n// AddFeedbackType registers pirate feedback templates\nfunc (h *PirateFeedbackHooks) AddFeedbackType(name string, templates []string) error {\n    if name == \"pirate\" {\n        pirateTemplates := []string{\n            \"Shiver me timbers! What kind of code be this?\",\n            \"Blimey! This commit be worthy of me treasure chest!\",\n            \"Ye code like a landlubber! Walk the plank!\",\n            \"This commit be a fine addition to the ship's log!\",\n            \"Avast! This code be needin' more rum!\",\n        }\n\n        templates = pirateTemplates\n        return nil\n    }\n\n    return fmt.Errorf(\"unknown feedback type: %s\", name)\n}\n\n// Plugin entry point\nfunc CreatePlugin() plugin.Plugin {\n    return &amp;FeedbackPlugin{}\n}\n</code></pre>"},{"location":"dev-guide/plugins/examples/#data-hook-example","title":"Data Hook Example","text":"<p>This example demonstrates how to access and modify Git analytics:</p> <pre><code>package main\n\nimport (\n    \"time\"\n    \"github.com/AccursedGalaxy/noidea/internal/plugin\"\n)\n\n// AnalyticsPlugin adds custom analytics\ntype AnalyticsPlugin struct {\n    ctx plugin.PluginContext\n}\n\n// Info returns plugin metadata\nfunc (p *AnalyticsPlugin) Info() plugin.PluginInfo {\n    return plugin.PluginInfo{\n        Name:            \"time-analytics\",\n        Version:         \"1.0.0\",\n        Description:     \"Adds time-based commit analytics\",\n        Author:          \"Your Name\",\n        MinNoideaVersion: \"v0.4.0\",\n    }\n}\n\n// Initialize sets up the plugin\nfunc (p *AnalyticsPlugin) Initialize(ctx plugin.PluginContext) error {\n    p.ctx = ctx\n\n    // Register data hooks\n    hooks := plugin.Hooks{\n        Data: &amp;TimeAnalyticsHooks{},\n    }\n\n    return ctx.RegisterHooks(hooks)\n}\n\n// Shutdown performs cleanup\nfunc (p *AnalyticsPlugin) Shutdown() error {\n    return nil\n}\n\n// TimeAnalyticsHooks implements the DataHooks interface\ntype TimeAnalyticsHooks struct{\n    morningCommits   int\n    afternoonCommits int\n    eveningCommits   int\n    nightCommits     int\n    weekdayCommits   int\n    weekendCommits   int\n}\n\n// OnCollectStats analyzes commit times\nfunc (h *TimeAnalyticsHooks) OnCollectStats(stats map[string]interface{}) error {\n    // Extract timestamps from commits\n    if commits, ok := stats[\"commits\"].([]interface{}); ok {\n        for _, c := range commits {\n            if commit, ok := c.(map[string]interface{}); ok {\n                if timestamp, ok := commit[\"timestamp\"].(time.Time); ok {\n                    // Analyze commit time\n                    hour := timestamp.Hour()\n                    weekday := timestamp.Weekday()\n\n                    // Time of day analysis\n                    switch {\n                    case hour &gt;= 5 &amp;&amp; hour &lt; 12:\n                        h.morningCommits++\n                    case hour &gt;= 12 &amp;&amp; hour &lt; 17:\n                        h.afternoonCommits++\n                    case hour &gt;= 17 &amp;&amp; hour &lt; 22:\n                        h.eveningCommits++\n                    default:\n                        h.nightCommits++\n                    }\n\n                    // Day of week analysis\n                    if weekday == time.Saturday || weekday == time.Sunday {\n                        h.weekendCommits++\n                    } else {\n                        h.weekdayCommits++\n                    }\n                }\n            }\n        }\n    }\n\n    return nil\n}\n\n// ProvideAnalytics returns time-based analytics\nfunc (h *TimeAnalyticsHooks) ProvideAnalytics() (map[string]interface{}, error) {\n    return map[string]interface{}{\n        \"time_analytics\": map[string]interface{}{\n            \"morning_commits\":   h.morningCommits,\n            \"afternoon_commits\": h.afternoonCommits,\n            \"evening_commits\":   h.eveningCommits,\n            \"night_commits\":     h.nightCommits,\n            \"weekday_commits\":   h.weekdayCommits,\n            \"weekend_commits\":   h.weekendCommits,\n        },\n    }, nil\n}\n\n// Plugin entry point\nfunc CreatePlugin() plugin.Plugin {\n    return &amp;AnalyticsPlugin{}\n}\n</code></pre>"},{"location":"dev-guide/plugins/examples/#ui-hook-example","title":"UI Hook Example","text":"<p>This example shows how to customize NoIdea's UI:</p> <pre><code>package main\n\nimport (\n    \"strings\"\n    \"github.com/fatih/color\"\n    \"github.com/AccursedGalaxy/noidea/internal/plugin\"\n)\n\n// CustomUIPlugin enhances NoIdea's UI\ntype CustomUIPlugin struct {\n    ctx plugin.PluginContext\n}\n\n// Info returns plugin metadata\nfunc (p *CustomUIPlugin) Info() plugin.PluginInfo {\n    return plugin.PluginInfo{\n        Name:            \"rainbow-ui\",\n        Version:         \"1.0.0\",\n        Description:     \"Adds colorful UI elements\",\n        Author:          \"Your Name\",\n        MinNoideaVersion: \"v0.4.0\",\n    }\n}\n\n// Initialize sets up the plugin\nfunc (p *CustomUIPlugin) Initialize(ctx plugin.PluginContext) error {\n    p.ctx = ctx\n\n    // Register UI hooks\n    hooks := plugin.Hooks{\n        UI: &amp;RainbowUIHooks{},\n    }\n\n    return ctx.RegisterHooks(hooks)\n}\n\n// Shutdown performs cleanup\nfunc (p *CustomUIPlugin) Shutdown() error {\n    return nil\n}\n\n// RainbowUIHooks implements the UIHooks interface\ntype RainbowUIHooks struct{}\n\n// BeforeOutput modifies CLI output\nfunc (h *RainbowUIHooks) BeforeOutput(output string) (string, error) {\n    // Add rainbow dividers to the output\n    if strings.Contains(output, \"-----\") {\n        divider := color.New(color.FgRed).Sprint(\"\u2764\ufe0f \") +\n                  color.New(color.FgYellow).Sprint(\"\ud83d\udc9b \") +\n                  color.New(color.FgGreen).Sprint(\"\ud83d\udc9a \") +\n                  color.New(color.FgBlue).Sprint(\"\ud83d\udc99 \") +\n                  color.New(color.FgMagenta).Sprint(\"\ud83d\udc9c \")\n\n        // Repeat the pattern to match divider length\n        fullDivider := strings.Repeat(divider, 3)\n\n        // Replace all dividers with rainbow dividers\n        output = strings.ReplaceAll(output, \"------------------------------------------------------\", fullDivider)\n    }\n\n    return output, nil\n}\n\n// AfterOutput runs after CLI output is displayed\nfunc (h *RainbowUIHooks) AfterOutput(output string) error {\n    // No post-processing needed\n    return nil\n}\n\n// CustomUI creates a custom UI element\nfunc (h *RainbowUIHooks) CustomUI(ctx plugin.UIContext) error {\n    // Not implementing custom UI elements in this example\n    return nil\n}\n\n// Plugin entry point\nfunc CreatePlugin() plugin.Plugin {\n    return &amp;CustomUIPlugin{}\n}\n</code></pre>"},{"location":"dev-guide/plugins/examples/#commit-hook-example","title":"Commit Hook Example","text":"<p>This example shows how to integrate with the Git commit process:</p> <pre><code>package main\n\nimport (\n    \"regexp\"\n    \"strings\"\n    \"github.com/AccursedGalaxy/noidea/internal/plugin\"\n)\n\n// CommitRulesPlugin enforces commit message rules\ntype CommitRulesPlugin struct {\n    ctx plugin.PluginContext\n}\n\n// Info returns plugin metadata\nfunc (p *CommitRulesPlugin) Info() plugin.PluginInfo {\n    return plugin.PluginInfo{\n        Name:            \"commit-rules\",\n        Version:         \"1.0.0\",\n        Description:     \"Enforces commit message rules\",\n        Author:          \"Your Name\",\n        MinNoideaVersion: \"v0.4.0\",\n    }\n}\n\n// Initialize sets up the plugin\nfunc (p *CommitRulesPlugin) Initialize(ctx plugin.PluginContext) error {\n    p.ctx = ctx\n\n    // Register commit hooks\n    hooks := plugin.Hooks{\n        Commit: &amp;CommitRulesHooks{logger: ctx.Logger()},\n    }\n\n    return ctx.RegisterHooks(hooks)\n}\n\n// Shutdown performs cleanup\nfunc (p *CommitRulesPlugin) Shutdown() error {\n    return nil\n}\n\n// CommitRulesHooks implements the CommitHooks interface\ntype CommitRulesHooks struct{\n    logger plugin.Logger\n}\n\n// BeforeCommit validates commit messages\nfunc (h *CommitRulesHooks) BeforeCommit(ctx plugin.CommitContext) error {\n    // Check if commit message follows conventional format\n    message := ctx.Message\n\n    // Conventional commit regex pattern\n    pattern := `^(feat|fix|docs|style|refactor|test|chore)(\\([a-z0-9-]+\\))?: .+`\n    match, err := regexp.MatchString(pattern, message)\n    if err != nil {\n        return err\n    }\n\n    if !match {\n        h.logger.Warn(\"Commit message does not follow conventional format\")\n        // We don't block the commit, just warn\n    }\n\n    return nil\n}\n\n// AfterCommit runs after a commit is created\nfunc (h *CommitRulesHooks) AfterCommit(ctx plugin.CommitContext) error {\n    // No post-commit processing needed\n    return nil\n}\n\n// ModifySuggestion enhances the commit message\nfunc (h *CommitRulesHooks) ModifySuggestion(message string, diff string) (string, error) {\n    // Add issue reference if found in branch name\n    // Example: If branch is \"feature/PROJ-123-new-feature\", add \"Refs: PROJ-123\"\n\n    // Get current branch name\n    // Note: In a real plugin, you'd get this from git\n    branchName := \"feature/PROJ-123-new-feature\" // Example value\n\n    // Extract issue ID with regex\n    issuePattern := `(([A-Z]+)-\\d+)`\n    re := regexp.MustCompile(issuePattern)\n    matches := re.FindStringSubmatch(branchName)\n\n    if len(matches) &gt; 1 {\n        issueID := matches[1]\n\n        // Check if issue ID is already in message\n        if !strings.Contains(message, issueID) {\n            // Add reference to the end of the first line\n            lines := strings.SplitN(message, \"\\n\", 2)\n\n            if len(lines) == 1 {\n                message = lines[0] + \" (Refs: \" + issueID + \")\"\n            } else {\n                message = lines[0] + \" (Refs: \" + issueID + \")\\n\" + lines[1]\n            }\n        }\n    }\n\n    return message, nil\n}\n\n// Plugin entry point\nfunc CreatePlugin() plugin.Plugin {\n    return &amp;CommitRulesPlugin{}\n}\n</code></pre>"},{"location":"dev-guide/plugins/examples/#best-practices-and-tips","title":"Best Practices and Tips","text":"<ol> <li>Error Handling: Always check errors and provide meaningful error messages</li> <li>Configuration: Make your plugin configurable through the Config interface</li> <li>Logging: Use the provided Logger rather than fmt.Println</li> <li>Testing: Write tests for your plugin functionality</li> <li>Documentation: Add usage instructions and examples in your plugin's README</li> <li>Dependencies: Minimize external dependencies to avoid conflicts</li> <li>Performance: Be mindful of performance impact, especially for commit hooks</li> <li>Versioning: Use semantic versioning for your plugin </li> </ol>"},{"location":"dev-guide/plugins/interfaces/","title":"Plugin Interface Specifications","text":"<p>This document defines the core interfaces and types that plugins must implement to integrate with NoIdea.</p>"},{"location":"dev-guide/plugins/interfaces/#core-plugin-interface","title":"Core Plugin Interface","text":"<p>Every NoIdea plugin must implement the <code>Plugin</code> interface:</p> <pre><code>// Plugin is the core interface that all plugins must implement\ntype Plugin interface {\n    // Info returns metadata about the plugin\n    Info() PluginInfo\n\n    // Initialize prepares the plugin for use\n    Initialize(ctx PluginContext) error\n\n    // Shutdown performs cleanup when the plugin is disabled\n    Shutdown() error\n}\n\n// PluginInfo contains metadata about a plugin\ntype PluginInfo struct {\n    // Name is the unique identifier for the plugin\n    Name string\n\n    // Version is the semantic version of the plugin\n    Version string\n\n    // Description explains what the plugin does\n    Description string\n\n    // Author identifies the plugin developer\n    Author string\n\n    // Website is the URL to the plugin's homepage\n    Website string\n\n    // MinNoideaVersion is the minimum compatible NoIdea version\n    MinNoideaVersion string\n}\n\n// PluginContext provides access to NoIdea's API and services\ntype PluginContext interface {\n    // Logger returns a logger instance for the plugin\n    Logger() Logger\n\n    // Config returns the plugin's configuration\n    Config() PluginConfig\n\n    // RegisterHooks allows the plugin to register its hooks\n    RegisterHooks(hooks Hooks) error\n\n    // GetService returns a shared NoIdea service by name\n    GetService(name string) (interface{}, error)\n}\n</code></pre>"},{"location":"dev-guide/plugins/interfaces/#hook-interfaces","title":"Hook Interfaces","text":"<p>Plugins can implement various hook interfaces to extend NoIdea functionality:</p> <pre><code>// Hooks is a collection of all available hook types\ntype Hooks struct {\n    Command     CommandHooks\n    Commit      CommitHooks\n    Feedback    FeedbackHooks\n    UI          UIHooks\n    Data        DataHooks\n    Persistence PersistenceHooks\n}\n\n// CommandHooks adds or modifies CLI commands\ntype CommandHooks interface {\n    // AddCommands returns new commands to add to the CLI\n    AddCommands() []Command\n\n    // ExtendCommand modifies an existing command\n    ExtendCommand(name string, extender CommandExtender) error\n}\n\n// CommitHooks integrates with the Git commit process\ntype CommitHooks interface {\n    // BeforeCommit runs before a commit is created\n    BeforeCommit(ctx CommitContext) error\n\n    // AfterCommit runs after a commit is created\n    AfterCommit(ctx CommitContext) error\n\n    // ModifySuggestion can alter a suggested commit message\n    ModifySuggestion(message string, diff string) (string, error)\n}\n\n// FeedbackHooks integrates with the Moai feedback system\ntype FeedbackHooks interface {\n    // ProcessFeedback can modify the feedback message\n    ProcessFeedback(feedback string, commit string) (string, error)\n\n    // AddFeedbackType registers a new feedback template type\n    AddFeedbackType(name string, templates []string) error\n}\n\n// UIHooks adds custom UI components and styling\ntype UIHooks interface {\n    // BeforeOutput runs before CLI output is displayed\n    BeforeOutput(output string) (string, error)\n\n    // AfterOutput runs after CLI output is displayed\n    AfterOutput(output string) error\n\n    // CustomUI creates a custom UI element\n    CustomUI(ctx UIContext) error\n}\n\n// DataHooks accesses and modifies Git analytics\ntype DataHooks interface {\n    // OnCollectStats is called when Git history is analyzed\n    OnCollectStats(stats map[string]interface{}) error\n\n    // ProvideAnalytics returns custom analytics data\n    ProvideAnalytics() (map[string]interface{}, error)\n}\n</code></pre>"},{"location":"dev-guide/plugins/interfaces/#plugin-configuration","title":"Plugin Configuration","text":"<p>Plugins can access and modify their configuration:</p> <pre><code>// PluginConfig manages plugin settings\ntype PluginConfig interface {\n    // Get retrieves a configuration value\n    Get(key string) (interface{}, error)\n\n    // Set stores a configuration value\n    Set(key string, value interface{}) error\n\n    // Has checks if a configuration key exists\n    Has(key string) bool\n\n    // Remove deletes a configuration value\n    Remove(key string) error\n}\n</code></pre>"},{"location":"dev-guide/plugins/interfaces/#plugin-manifest","title":"Plugin Manifest","text":"<p>Each plugin should include a <code>plugin.json</code> manifest file:</p> <pre><code>{\n    \"name\": \"my-awesome-plugin\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Adds awesome functionality to NoIdea\",\n    \"author\": \"Your Name\",\n    \"website\": \"https://example.com/my-plugin\",\n    \"minNoideaVersion\": \"v0.4.0\",\n    \"main\": \"plugin.go\",\n    \"hooks\": [\"command\", \"feedback\"],\n    \"permissions\": [\"git\", \"config\"]\n}\n</code></pre>"},{"location":"dev-guide/plugins/interfaces/#plugin-loading","title":"Plugin Loading","text":"<p>Plugins can be loaded through several methods:</p> <ol> <li>Local Go Plugin: Embedded Go plugins compiled as shared objects</li> <li>Script Plugin: External script files using a scripting language</li> <li>HTTP Plugin: Remotely loaded plugins over HTTPS</li> <li>Container Plugin: Isolated plugins running in containers</li> </ol>"},{"location":"dev-guide/plugins/interfaces/#error-handling","title":"Error Handling","text":"<p>Plugins should implement proper error handling:</p> <pre><code>// PluginError provides detailed error information\ntype PluginError struct {\n    // Code is a unique error identifier\n    Code string\n\n    // Message is a human-readable error message\n    Message string\n\n    // Details contains additional error information\n    Details map[string]interface{}\n\n    // Cause is the underlying error\n    Cause error\n}\n</code></pre>"},{"location":"dev-guide/plugins/interfaces/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling: Always return meaningful errors</li> <li>Performance: Minimize impact on NoIdea's performance</li> <li>Isolation: Don't interfere with other plugins</li> <li>Resources: Clean up resources during Shutdown</li> <li>Configuration: Use the provided PluginConfig interface</li> <li>Logging: Use the provided Logger interface </li> </ol>"},{"location":"dev-guide/plugins/plugins/","title":"Plugin Ideas","text":"<p>This document provides inspiration for plugin developers looking to extend NoIdea's functionality. These ideas range from practical developer tools to fun integrations that enhance the Git workflow experience.</p>"},{"location":"dev-guide/plugins/plugins/#integration-plugins","title":"Integration Plugins","text":""},{"location":"dev-guide/plugins/plugins/#jira-integration-plugin","title":"JIRA Integration Plugin","text":"<ul> <li>Auto-link commits to JIRA tickets based on branch names</li> <li>Append JIRA ticket references to commit messages</li> <li>Show JIRA ticket status when suggesting commit messages</li> <li>Update JIRA ticket status based on commit content</li> </ul>"},{"location":"dev-guide/plugins/plugins/#slack-notification-plugin","title":"Slack Notification Plugin","text":"<ul> <li>Send commit summaries to Slack channels</li> <li>Create daily/weekly digest of team activity</li> <li>Notify team members when their code is referenced</li> <li>Share Moai feedback with the team for a laugh</li> </ul>"},{"location":"dev-guide/plugins/plugins/#pull-request-enhancer","title":"Pull Request Enhancer","text":"<ul> <li>Generate PR descriptions based on commits</li> <li>Suggest reviewers based on file change history</li> <li>Auto-label PRs based on commit content and patterns</li> <li>Create PR templates customized to your repository structure</li> </ul>"},{"location":"dev-guide/plugins/plugins/#workflow-enhancement-plugins","title":"Workflow Enhancement Plugins","text":""},{"location":"dev-guide/plugins/plugins/#commit-calendar-visualizer","title":"Commit Calendar Visualizer","text":"<ul> <li>Show Git activity as a terminal heatmap</li> <li>Provide work pattern insights (best commit times, frequency)</li> <li>Compare personal vs. team commit patterns</li> <li>Identify optimal coding hours based on commit quality</li> </ul>"},{"location":"dev-guide/plugins/plugins/#branch-manager-plugin","title":"Branch Manager Plugin","text":"<ul> <li>Suggest branch cleanup (stale branches)</li> <li>Auto-naming branches based on commit intention</li> <li>Track branch health (how far behind/ahead of main)</li> <li>Generate branch usage statistics</li> </ul>"},{"location":"dev-guide/plugins/plugins/#commit-message-templates","title":"Commit Message Templates","text":"<ul> <li>Team-specific commit templates</li> <li>Domain-specific message suggestions (frontend, backend, etc.)</li> <li>Historical pattern matching for consistency</li> <li>Repository-specific terminology enforcement</li> </ul>"},{"location":"dev-guide/plugins/plugins/#feedback-analysis-plugins","title":"Feedback &amp; Analysis Plugins","text":""},{"location":"dev-guide/plugins/plugins/#code-quality-insights","title":"Code Quality Insights","text":"<ul> <li>Analyze commits for code quality metrics</li> <li>Provide suggestions for improving test coverage</li> <li>Flag potential security issues in commits</li> <li>Track code complexity trends over time</li> </ul>"},{"location":"dev-guide/plugins/plugins/#team-collaboration-analyzer","title":"Team Collaboration Analyzer","text":"<ul> <li>Track who works on which parts of the codebase</li> <li>Generate collaboration graphs</li> <li>Identify knowledge silos and suggest knowledge sharing</li> <li>Create team attribution reports for leadership</li> </ul>"},{"location":"dev-guide/plugins/plugins/#language-specific-feedback","title":"Language-Specific Feedback","text":"<ul> <li>Tailored Moai feedback for specific languages (Python, JavaScript, etc.)</li> <li>Framework-specific commit advice (React, Django, etc.)</li> <li>Best practices reminders for your tech stack</li> <li>Identify language-specific anti-patterns</li> </ul>"},{"location":"dev-guide/plugins/plugins/#fun-productivity-plugins","title":"Fun &amp; Productivity Plugins","text":""},{"location":"dev-guide/plugins/plugins/#commitment-tracker","title":"Commitment Tracker","text":"<ul> <li>Gamify Git commits with achievements and streaks</li> <li>Set and track coding goals</li> <li>Generate \"developer journey\" reports</li> <li>Compete with teammates on commit quality metrics</li> </ul>"},{"location":"dev-guide/plugins/plugins/#themed-moai-personalities","title":"Themed Moai Personalities","text":"<ul> <li>Movie character personalities (Yoda, Tony Stark, etc.)</li> <li>Historical figures (Einstein, Shakespeare, etc.)</li> <li>Special event themes (Halloween, Christmas, etc.)</li> <li>Team member impersonations (with their permission, of course!)</li> </ul>"},{"location":"dev-guide/plugins/plugins/#pomodoro-integration","title":"Pomodoro Integration","text":"<ul> <li>Track work sessions with Git commit grouping</li> <li>Suggest commit points at break times</li> <li>Analyze productivity across work sessions</li> <li>Recommend optimal work/break patterns based on your commit history</li> </ul>"},{"location":"dev-guide/plugins/plugins/#developer-tool-plugins","title":"Developer Tool Plugins","text":""},{"location":"dev-guide/plugins/plugins/#local-llm-support","title":"Local LLM Support","text":"<ul> <li>Add support for local LLM models (Ollama, LM Studio)</li> <li>Reduced API costs with offline operation</li> <li>Privacy-focused alternative</li> <li>Customized domain-specific model fine-tuning</li> </ul>"},{"location":"dev-guide/plugins/plugins/#documentation-generator","title":"Documentation Generator","text":"<ul> <li>Auto-generate/update README sections based on commits</li> <li>Create changelog entries from commit history</li> <li>Generate code comments based on changes</li> <li>Maintain API documentation in sync with code</li> </ul>"},{"location":"dev-guide/plugins/plugins/#dependency-analyzer","title":"Dependency Analyzer","text":"<ul> <li>Track dependencies added in commits</li> <li>Flag potential dependency vulnerabilities</li> <li>Suggest updates based on commits and compatibility</li> <li>Monitor dependency bloat and suggest alternatives</li> </ul>"},{"location":"dev-guide/plugins/plugins/#domain-specific-plugins","title":"Domain-Specific Plugins","text":""},{"location":"dev-guide/plugins/plugins/#semantic-version-enforcer","title":"Semantic Version Enforcer","text":"<ul> <li>Analyze commits to suggest semantic version bumps</li> <li>Enforce versioning policies</li> <li>Generate version histories with summaries</li> <li>Automate version bumping based on commit content</li> </ul>"},{"location":"dev-guide/plugins/plugins/#conventional-commits-validator","title":"Conventional Commits Validator","text":"<ul> <li>Enforce conventional commit message format</li> <li>Provide guided commit message creation</li> <li>Show team compliance with commit standards</li> <li>Convert non-conventional commits to conventional format</li> </ul>"},{"location":"dev-guide/plugins/plugins/#code-review-assistant","title":"Code Review Assistant","text":"<ul> <li>Pre-analyze commits for common issues before review</li> <li>Generate review checklists based on changed files</li> <li>Track recurring feedback to prevent repeat issues</li> <li>Suggest reviewers based on expertise and availability</li> </ul>"},{"location":"dev-guide/plugins/plugins/#implementation-suggestions","title":"Implementation Suggestions","text":"<p>When implementing plugins, consider these approaches:</p>"},{"location":"dev-guide/plugins/plugins/#integration-plugins_1","title":"Integration Plugins","text":"<p>Focus on clean API abstractions and configuration options: <pre><code>// Example JIRA integration plugin\ntype JIRAConfig struct {\n    URL      string\n    Username string\n    Token    string\n    Project  string\n}\n\nfunc (p *JIRAPlugin) Initialize(ctx plugin.PluginContext) error {\n    // Read configuration\n    config := JIRAConfig{}\n    if err := ctx.Config().Get(\"jira\", &amp;config); err != nil {\n        return fmt.Errorf(\"failed to load JIRA configuration: %w\", err)\n    }\n\n    // Initialize JIRA client\n    p.client = jira.NewClient(config.URL, config.Username, config.Token)\n\n    // Register hooks\n    return ctx.RegisterHooks(plugin.Hooks{\n        Commit: &amp;JIRACommitHooks{client: p.client, project: config.Project},\n    })\n}\n</code></pre></p>"},{"location":"dev-guide/plugins/plugins/#ui-enhancement-plugins","title":"UI Enhancement Plugins","text":"<p>Consider accessibility and terminal compatibility: <pre><code>// Example colorful UI plugin\nfunc (h *ColorfulUIHooks) BeforeOutput(output string) (string, error) {\n    // Check if color is disabled\n    if noColor, _ := strconv.ParseBool(os.Getenv(\"NO_COLOR\")); noColor {\n        return output, nil\n    }\n\n    // Add colorful formatting\n    output = strings.ReplaceAll(output, \"Success:\", color.GreenString(\"Success:\"))\n    output = strings.ReplaceAll(output, \"Warning:\", color.YellowString(\"Warning:\"))\n    output = strings.ReplaceAll(output, \"Error:\", color.RedString(\"Error:\"))\n\n    return output, nil\n}\n</code></pre></p>"},{"location":"dev-guide/plugins/plugins/#analysis-plugins","title":"Analysis Plugins","text":"<p>Handle large repositories efficiently: <pre><code>// Example code complexity analyzer\nfunc (h *ComplexityHooks) OnCollectStats(stats map[string]interface{}) error {\n    // Process in chunks to avoid memory issues\n    if commits, ok := stats[\"commits\"].([]interface{}); ok {\n        const chunkSize = 100\n        for i := 0; i &lt; len(commits); i += chunkSize {\n            end := i + chunkSize\n            if end &gt; len(commits) {\n                end = len(commits)\n            }\n\n            chunk := commits[i:end]\n            if err := h.processCommitChunk(chunk); err != nil {\n                return err\n            }\n        }\n    }\n    return nil\n}\n</code></pre></p>"},{"location":"dev-guide/plugins/plugins/#getting-started","title":"Getting Started","text":"<p>To start developing your own plugin, see the Plugin Examples document for practical implementation guidance. The Interface Specifications document provides detailed technical specifications for plugin interfaces.</p> <p>We encourage community contributions! When you develop a plugin, consider sharing it with others by submitting it to our plugin registry. </p>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>Learn how to configure noidea to suit your workflow and preferences.</p>"},{"location":"user-guide/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>noidea can be configured through:</p> <ol> <li>Command line options: Temporary settings for individual commands</li> <li>Git config: Repository-specific settings</li> <li>Configuration file: Global settings in <code>~/.noidea/config.json</code></li> <li>Environment variables: For API keys and global settings</li> </ol>"},{"location":"user-guide/configuration/#initial-setup","title":"Initial Setup","text":"<p>Run the interactive setup assistant:</p> <pre><code>noidea config --init\n</code></pre> <p>This will walk you through setting up noidea, including AI provider selection and API key configuration.</p>"},{"location":"user-guide/configuration/#api-key-setup","title":"API Key Setup","text":"<p>To use AI-powered features, you need to configure an API key:</p> <pre><code>noidea config apikey\n</code></pre> <p>This securely stores your API key. See API Key Management for details.</p>"},{"location":"user-guide/configuration/#configuration-file","title":"Configuration File","text":"<p>The configuration file is located at <code>~/.noidea/config.json</code>. Here's an example:</p> <pre><code>{\n  \"llm\": {\n    \"enabled\": true,\n    \"provider\": \"xai\",\n    \"api_key\": \"\",\n    \"model\": \"grok-4-fast-reasoning\",\n    \"temperature\": 0.7\n  },\n  \"moai\": {\n    \"use_lint\": false,\n    \"faces_mode\": \"random\",\n    \"personality\": \"snarky_reviewer\",\n    \"personality_file\": \"~/.noidea/personalities.json\"\n  }\n}\n</code></pre>"},{"location":"user-guide/configuration/#llm-settings","title":"LLM Settings","text":"Setting Description Default <code>enabled</code> Enable/disable AI features <code>true</code> <code>provider</code> AI provider to use (xai, openai, deepseek) <code>xai</code> <code>model</code> Model to use with the provider <code>grok-4-fast-reasoning</code> <code>temperature</code> Randomness of responses (0.0-1.0) <code>0.7</code>"},{"location":"user-guide/configuration/#moai-settings","title":"Moai Settings","text":"Setting Description Default <code>use_lint</code> Include linting results in feedback <code>false</code> <code>faces_mode</code> Face selection mode (random, mood) <code>random</code> <code>personality</code> Default personality for feedback <code>professional_sass</code> <code>include_history</code> Include commit history for context <code>true</code>"},{"location":"user-guide/configuration/#git-config-settings","title":"Git Config Settings","text":"<p>Configure noidea through Git:</p> <pre><code># Enable commit message suggestions\ngit config noidea.suggest true\n\n# Set personality for feedback\ngit config noidea.personality supportive_mentor\n\n# Use full diff analysis for better suggestions\ngit config noidea.suggest.full-diff true\n</code></pre>"},{"location":"user-guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can use environment variables for configuration:</p> <pre><code># API keys\nexport XAI_API_KEY=\"your_api_key_here\"\nexport OPENAI_API_KEY=\"your_api_key_here\"\n\n# General settings\nexport NOIDEA_PERSONALITY=\"snarky_reviewer\"\n</code></pre>"},{"location":"user-guide/configuration/#checking-current-configuration","title":"Checking Current Configuration","text":"<p>To see your current configuration:</p> <pre><code>noidea config --show\n</code></pre>"},{"location":"user-guide/getting-started/","title":"Getting Started","text":""},{"location":"user-guide/getting-started/#smooth-setup","title":"Smooth Setup","text":"<p>noidea is designed for instant value\u2014install, init, commit.</p>"},{"location":"user-guide/getting-started/#step-1-install","title":"Step 1: Install","text":"<p>Download or clone, then: <pre><code>./install.sh  # Sets up binary and ~/.noidea/config (AI off by default)\n</code></pre></p>"},{"location":"user-guide/getting-started/#step-2-init-in-repo","title":"Step 2: Init in Repo","text":"<p><pre><code>cd your-repo\nnoidea init  # Installs hooks: suggestions on commit, Moai faces after\n</code></pre> - Prompts: Enable suggestions? (Yes for editor magic). Interactive/full-diff optional.</p>"},{"location":"user-guide/getting-started/#step-3-try-it","title":"Step 3: Try It","text":"<pre><code>git add .\ngit commit  # Opens editor with suggestion (local/AI)\u2014edit/save!\n# After: Moai face appears (no text by default).\n</code></pre> <p>Defaults: - Suggestions: Always (editor pre-fill on commit). - Moai: Faces always (text optional via AI). - AI: Off (enable with <code>noidea config --init</code> for smarter everything).</p>"},{"location":"user-guide/getting-started/#enable-ai-optional","title":"Enable AI (Optional)","text":"<p><pre><code>noidea config --init  # Set provider/key/model (grok-4-fast-reasoning default)\n</code></pre> Suggestions get context-aware; Moai adds text feedback.</p> <p>Troubleshooting? See Troubleshooting.</p>"},{"location":"user-guide/getting-started/#introduction","title":"Introduction","text":"<p>noidea is a Git companion that provides AI-powered commit message suggestions and entertaining feedback after each commit, making your Git experience more enjoyable and productive.</p>"},{"location":"user-guide/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ul> <li>Git installed and configured</li> <li>Go 1.23+ (if building from source)</li> <li>An API key from one of the supported AI providers (for AI features)</li> </ul>"},{"location":"user-guide/getting-started/#quick-setup","title":"Quick Setup","text":"<p>Here's how to get started in just a few minutes:</p> <pre><code># Install noidea\ngit clone https://github.com/AccursedGalaxy/noidea\ncd noidea\n./install.sh\n\n# Set up in your Git repo\ncd /path/to/your/repo\nnoidea init\n\n# Configure your API key\nnoidea config apikey\n</code></pre>"},{"location":"user-guide/getting-started/#next-steps","title":"Next Steps","text":"<p>After setting up noidea, check out these guides:</p> <ul> <li>Installation Options - Detailed installation instructions</li> <li>Configuration - Customize noidea's behavior</li> <li>Command Overview - Learn about available commands</li> </ul>"},{"location":"user-guide/getting-started/#quick-demo","title":"Quick Demo","text":"<p>Here's a quick example of noidea in action:</p> <ol> <li>Stage your changes with <code>git add .</code></li> <li>Run <code>git commit</code> (noidea will suggest a message)</li> <li>After committing, enjoy feedback from the Moai</li> </ol>"},{"location":"user-guide/getting-started/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues, check out the Troubleshooting section or open an issue on GitHub. </p>"},{"location":"user-guide/installation/","title":"Installation Guide","text":"<p>There are several ways to install noidea on your system. Choose the option that works best for you.</p>"},{"location":"user-guide/installation/#quick-install-recommended","title":"Quick Install (Recommended)","text":"<p>The fastest way to get started is with our one-line installer:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/AccursedGalaxy/noidea/main/quickinstall.sh | bash\n</code></pre> <p>This script will: - Download the latest noidea release - Install it to <code>/usr/local/bin</code> (might require sudo) - Make it executable</p>"},{"location":"user-guide/installation/#manual-installation","title":"Manual Installation","text":""},{"location":"user-guide/installation/#option-1-clone-and-install","title":"Option 1: Clone and Install","text":"<pre><code># Clone the repository\ngit clone https://github.com/AccursedGalaxy/noidea.git\ncd noidea\n\n# Run the installer script\n./install.sh\n</code></pre>"},{"location":"user-guide/installation/#option-2-download-binary","title":"Option 2: Download Binary","text":"<ol> <li>Go to the Releases page</li> <li>Download the appropriate binary for your platform</li> <li>Make it executable: <code>chmod +x noidea</code></li> <li>Move it to your PATH: <code>sudo mv noidea /usr/local/bin/</code></li> </ol>"},{"location":"user-guide/installation/#building-from-source","title":"Building from Source","text":"<p>If you prefer to build from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/AccursedGalaxy/noidea.git\ncd noidea\n\n# Build the binary\ngo build -o noidea\n\n# Install to PATH\nsudo mv noidea /usr/local/bin/\n</code></pre>"},{"location":"user-guide/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that noidea is installed correctly:</p> <pre><code>noidea --version\n</code></pre> <p>This should display the version information.</p>"},{"location":"user-guide/installation/#next-steps","title":"Next Steps","text":"<p>After installation:</p> <ol> <li>Set up noidea in your repository</li> <li>Configure your API key for AI features</li> <li>Explore the available commands </li> </ol>"},{"location":"user-guide/troubleshooting/","title":"Troubleshooting","text":"<p>This guide addresses common issues you might encounter while using noidea.</p>"},{"location":"user-guide/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"user-guide/troubleshooting/#noidea-command-not-found","title":"noidea Command Not Found","text":"<p>Problem: After installation, running <code>noidea</code> results in \"command not found\".</p> <p>Solutions:</p> <ol> <li> <p>Check if the binary is in your PATH:    <pre><code>which noidea\n</code></pre></p> </li> <li> <p>If not found, verify the installation location:    <pre><code># Installed to /usr/local/bin\nls -la /usr/local/bin/noidea\n\n# Or in your Go bin directory\nls -la ~/go/bin/noidea\n</code></pre></p> </li> <li> <p>Add the installation directory to your PATH if needed:    <pre><code># Add to your .bashrc or .zshrc\nexport PATH=$PATH:/path/to/directory\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#installation-fails-with-permission-error","title":"Installation Fails with Permission Error","text":"<p>Problem: <code>./install.sh</code> fails with permission errors.</p> <p>Solution: Run with sudo or specify a user-writable location:    <pre><code>sudo ./install.sh\n# Or\n./install.sh --prefix ~/bin\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#api-key-issues","title":"API Key Issues","text":""},{"location":"user-guide/troubleshooting/#api-key-validation-fails","title":"API Key Validation Fails","text":"<p>Problem: \"API key validation error\" or \"Invalid API key\" messages.</p> <p>Solutions:</p> <ol> <li> <p>Verify your API key:    <pre><code>noidea config apikey-status\n</code></pre></p> </li> <li> <p>Re-enter your API key:    <pre><code>noidea config apikey\n</code></pre></p> </li> <li> <p>Check your internet connection and provider status.</p> </li> </ol>"},{"location":"user-guide/troubleshooting/#cant-access-ai-features","title":"Can't Access AI Features","text":"<p>Problem: AI-powered features like <code>suggest --ai</code> or <code>moai --ai</code> don't work.</p> <p>Solutions:</p> <ol> <li> <p>Ensure AI features are enabled:    <pre><code># Check configuration\nnoidea config --show | grep enabled\n\n# Enable if needed\nnoidea config set llm.enabled true\n</code></pre></p> </li> <li> <p>Set up your API key if you haven't already:    <pre><code>noidea config apikey\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#git-integration-issues","title":"Git Integration Issues","text":""},{"location":"user-guide/troubleshooting/#git-hooks-not-working","title":"Git Hooks Not Working","text":"<p>Problem: noidea's Git hooks (commit suggestions, Moai feedback) aren't running.</p> <p>Solutions:</p> <ol> <li> <p>Verify hooks are installed in your repository:    <pre><code>ls -la .git/hooks/prepare-commit-msg .git/hooks/post-commit\n</code></pre></p> </li> <li> <p>If missing, run:    <pre><code>noidea init\n</code></pre></p> </li> <li> <p>Ensure hooks are executable:    <pre><code>chmod +x .git/hooks/prepare-commit-msg .git/hooks/post-commit\n</code></pre></p> </li> <li> <p>Check if hooks are bypassed:    <pre><code># Make sure you're not using --no-verify\ngit config --get noidea.suggest\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#commit-suggestions-not-appearing","title":"Commit Suggestions Not Appearing","text":"<p>Problem: The commit message suggestion feature isn't working.</p> <p>Solutions:</p> <ol> <li> <p>Make sure it's enabled:    <pre><code>git config --get noidea.suggest\n\n# Enable if needed\ngit config noidea.suggest true\n</code></pre></p> </li> <li> <p>Verify you have staged changes:    <pre><code>git status\n</code></pre></p> </li> <li> <p>Try running the suggest command directly:    <pre><code>noidea suggest\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"user-guide/troubleshooting/#slow-commit-suggestions","title":"Slow Commit Suggestions","text":"<p>Problem: Generating commit suggestions takes too long.</p> <p>Solutions:</p> <ol> <li> <p>Disable full-diff mode:    <pre><code>git config noidea.suggest.full-diff false\n</code></pre></p> </li> <li> <p>Reduce history context:    <pre><code>git config noidea.suggest.history 5\n</code></pre></p> </li> </ol>"},{"location":"user-guide/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"user-guide/troubleshooting/#configuration-changes-not-applied","title":"Configuration Changes Not Applied","text":"<p>Problem: Changes to configuration don't seem to take effect.</p> <p>Solutions:</p> <ol> <li> <p>Check current configuration:    <pre><code>noidea config --show\n</code></pre></p> </li> <li> <p>Verify configuration file location:    <pre><code>ls -la ~/.noidea/config.json\n</code></pre></p> </li> <li> <p>Ensure you're using the correct method (environment variables might override file settings).</p> </li> </ol>"},{"location":"user-guide/troubleshooting/#getting-more-help","title":"Getting More Help","text":"<p>If your issue isn't addressed here:</p> <ol> <li> <p>Check the logs for more information (if enabled):    <pre><code>cat ~/.noidea/logs/noidea.log\n</code></pre></p> </li> <li> <p>Open an issue on GitHub with:</p> </li> <li>noidea version (<code>noidea --version</code>)</li> <li>OS details</li> <li>Error messages</li> <li>Steps to reproduce </li> </ol>"},{"location":"user-guide/commands/config/","title":"Config Command","text":"<p>The <code>config</code> command allows you to manage your noidea configuration, including API keys and application settings.</p>"},{"location":"user-guide/commands/config/#usage","title":"Usage","text":"<pre><code>noidea config [command] [flags]\n</code></pre>"},{"location":"user-guide/commands/config/#description","title":"Description","text":"<p>The config command provides several functions: - View your current configuration - Create or update configuration settings - Manage API keys for AI providers - Validate your configuration</p> <p>By default, noidea stores configuration in <code>~/.noidea/config.toml</code>.</p>"},{"location":"user-guide/commands/config/#base-options","title":"Base Options","text":"Flag Short Default Description <code>--show</code> <code>-s</code> <code>false</code> Show current configuration <code>--init</code> <code>-i</code> <code>false</code> Initialize a new config file interactively <code>--validate</code> <code>-v</code> <code>false</code> Validate the current configuration <code>--path</code> <code>-p</code> Path to config file (default: ~/.noidea/config.toml)"},{"location":"user-guide/commands/config/#subcommands","title":"Subcommands","text":""},{"location":"user-guide/commands/config/#api-key-management","title":"API Key Management","text":"Command Description <code>apikey</code> Set up an API key and store it securely <code>apikey-status</code> Check API key storage status and validity <code>apikey-remove</code> Remove a stored API key <code>clean-env</code> Generate commands to clean environment variables"},{"location":"user-guide/commands/config/#examples","title":"Examples","text":""},{"location":"user-guide/commands/config/#basic-usage","title":"Basic Usage","text":"<pre><code># View current configuration\nnoidea config --show\n\n# Create/update configuration interactively\nnoidea config --init\n\n# Validate configuration\nnoidea config --validate\n</code></pre>"},{"location":"user-guide/commands/config/#api-key-management_1","title":"API Key Management","text":"<pre><code># Set up and securely store an API key\nnoidea config apikey\n\n# Check if API key is valid and properly stored\nnoidea config apikey-status\n\n# Remove a stored API key\nnoidea config apikey-remove\n\n# Generate commands to clean API key environment variables\nnoidea config clean-env\n</code></pre>"},{"location":"user-guide/commands/config/#interactive-configuration","title":"Interactive Configuration","text":"<p>When you run <code>noidea config --init</code>, you'll be guided through an interactive setup that lets you configure:</p> <ol> <li>LLM Settings</li> <li>Enable/disable AI integration</li> <li>Choose AI provider (xai, openai, deepseek)</li> <li>Set up API key</li> <li> <p>Select model and temperature</p> </li> <li> <p>Moai Settings</p> </li> <li>Enable/disable linting feedback</li> <li> <p>Choose faces mode (random, sequential, mood)</p> </li> <li> <p>Personality Settings</p> </li> <li>Choose from several built-in personalities<ul> <li>Professional with Sass</li> <li>Snarky Code Reviewer</li> <li>Supportive Mentor</li> <li>Git Expert</li> <li>Motivational Speaker</li> </ul> </li> </ol>"},{"location":"user-guide/commands/config/#api-key-security","title":"API Key Security","text":"<p>noidea securely stores API keys using your system's native keyring/keychain when available:</p> <ul> <li>macOS: Uses the Keychain</li> <li>Windows: Uses the Windows Credential Manager</li> <li>Linux: Uses the Secret Service API (requires libsecret)</li> </ul> <p>If the system keyring is unavailable, a fallback encrypted storage is used in <code>~/.noidea/secure/</code>.</p> <p>For more details on API key management, see the API Key Management guide.</p>"},{"location":"user-guide/commands/config/#related-commands","title":"Related Commands","text":"<ul> <li><code>init</code> - Set up noidea in your repository</li> <li><code>suggest</code> - Generate commit message suggestions</li> <li><code>moai</code> - Display feedback for your commits </li> </ul>"},{"location":"user-guide/commands/init/","title":"Init Command","text":"<p>The <code>init</code> command sets up noidea in your Git repository by installing Git hooks that enable commit suggestions and Moai feedback.</p>"},{"location":"user-guide/commands/init/#usage","title":"Usage","text":"<pre><code>noidea init [flags]\n</code></pre>"},{"location":"user-guide/commands/init/#description","title":"Description","text":"<p>When you run <code>noidea init</code>, it:</p> <ol> <li>Checks if Git is installed and properly configured</li> <li>Verifies you're in a Git repository</li> <li>Creates and installs the necessary Git hooks:</li> <li><code>post-commit</code> hook for displaying Moai feedback after commits</li> <li><code>prepare-commit-msg</code> hook for generating commit message suggestions</li> </ol> <p>If existing hooks are found, noidea automatically creates backups with a <code>.bak</code> extension before installing its own hooks.</p>"},{"location":"user-guide/commands/init/#options","title":"Options","text":"Flag Short Default Description <code>--suggest</code> <code>-s</code> <code>true</code> Enable commit message suggestions <code>--interactive</code> <code>-i</code> <code>false</code> Enable interactive mode for direct command usage <code>--full-diff</code> <code>-f</code> <code>false</code> Include full diffs in commit message analysis <code>--force</code> <code>-F</code> <code>false</code> Force installation even if checks fail"},{"location":"user-guide/commands/init/#examples","title":"Examples","text":""},{"location":"user-guide/commands/init/#basic-installation","title":"Basic Installation","text":"<pre><code># Navigate to your repository\ncd /path/to/your/repo\n\n# Initialize noidea with default settings\nnoidea init\n</code></pre>"},{"location":"user-guide/commands/init/#customized-installation","title":"Customized Installation","text":"<pre><code># Enable interactive mode and full diff analysis\nnoidea init --interactive --full-diff\n\n# Disable commit suggestions\nnoidea init --suggest=false\n\n# Force installation even if issues are detected\nnoidea init --force\n</code></pre>"},{"location":"user-guide/commands/init/#post-installation","title":"Post-Installation","text":"<p>After installation, you can modify settings using Git config:</p> <pre><code># Enable/disable commit suggestions\ngit config noidea.suggest true   # Enable\ngit config noidea.suggest false  # Disable\n\n# Change interactive mode\ngit config noidea.suggest.interactive true\n\n# Change full diff analysis\ngit config noidea.suggest.full-diff true\n</code></pre>"},{"location":"user-guide/commands/init/#api-key-configuration","title":"API Key Configuration","text":"<p>For the best experience with commit suggestions, configure an API key:</p> <pre><code># Configure interactively\nnoidea config --init\n\n# Or set the API key directly\nnoidea config apikey\n</code></pre> <p>Without an API key, noidea will fall back to a simpler local algorithm for generating commit messages.</p>"},{"location":"user-guide/commands/init/#related-commands","title":"Related Commands","text":"<ul> <li><code>suggest</code> - Generate commit message suggestions</li> <li><code>moai</code> - Display feedback for your commits</li> <li><code>config</code> - Configure noidea settings </li> </ul>"},{"location":"user-guide/commands/moai/","title":"moai","text":"<p>The <code>moai</code> command displays a Moai face (\ud83d\uddff) with witty feedback about your most recent commit, bringing a fun element to your Git workflow.</p>"},{"location":"user-guide/commands/moai/#usage","title":"Usage","text":"<pre><code>noidea moai [options] [commit message]\n</code></pre>"},{"location":"user-guide/commands/moai/#description","title":"Description","text":"<p>After making a commit, this command analyzes your commit message and displays a Moai character with personality-driven feedback. By default, it uses locally generated feedback, but with the <code>--ai</code> flag, it leverages AI to provide more contextual and intelligent responses.</p>"},{"location":"user-guide/commands/moai/#options","title":"Options","text":"Option Description <code>--ai</code>, <code>-a</code> Use AI to generate feedback (requires API key) <code>--diff</code>, <code>-d</code> Include the diff in AI context for better analysis <code>--personality</code>, <code>-p</code> Specify the personality to use for feedback <code>--list-personalities</code>, <code>-l</code> List all available personalities <code>--history</code>, <code>-H</code> Include recent commit history for context <code>--debug</code>, <code>-D</code> Enable debug mode to show detailed API information"},{"location":"user-guide/commands/moai/#examples","title":"Examples","text":""},{"location":"user-guide/commands/moai/#basic-usage","title":"Basic Usage","text":"<pre><code># Show feedback for your most recent commit\nnoidea moai\n</code></pre>"},{"location":"user-guide/commands/moai/#ai-powered-feedback","title":"AI-Powered Feedback","text":"<pre><code># Use AI to generate more contextual feedback\nnoidea moai --ai\n</code></pre>"},{"location":"user-guide/commands/moai/#using-different-personalities","title":"Using Different Personalities","text":"<pre><code># List available personalities\nnoidea moai --list-personalities\n\n# Use a specific personality\nnoidea moai --ai --personality supportive_mentor\n</code></pre>"},{"location":"user-guide/commands/moai/#including-more-context","title":"Including More Context","text":"<pre><code># Include diff and history for better context\nnoidea moai --ai --diff --history\n</code></pre>"},{"location":"user-guide/commands/moai/#personalities","title":"Personalities","text":"<p>noidea includes several built-in personalities for Moai feedback:</p> Personality Description <code>professional_sass</code> Professional with a hint of sass (default) <code>snarky_reviewer</code> Witty and sarcastic code reviewer <code>supportive_mentor</code> Encouraging and supportive mentor <code>git_expert</code> Technical Git expert with best practices <code>motivational_speaker</code> Energetic and motivational <p>You can set your default personality in the configuration or via environment variables:</p> <pre><code># In .noidea/config.json\n{\n  \"moai\": {\n    \"personality\": \"supportive_mentor\"\n  }\n}\n\n# Or via environment\nexport NOIDEA_PERSONALITY=\"supportive_mentor\"\n</code></pre>"},{"location":"user-guide/commands/moai/#custom-personalities","title":"Custom Personalities","text":"<p>You can create custom personalities by creating a <code>personalities.toml</code> file in your <code>~/.noidea/</code> directory. See the Personalities page for more details.</p>"},{"location":"user-guide/commands/moai/#post-commit-hook","title":"Post-Commit Hook","text":"<p>When you run <code>noidea init</code> in a repository, it sets up a post-commit hook that automatically runs the <code>moai</code> command after each commit, providing immediate feedback.</p> <p>You can disable this behavior by editing the <code>.git/hooks/post-commit</code> file in your repository. </p>"},{"location":"user-guide/commands/overview/","title":"Command Reference","text":"<p>noidea offers several commands to enhance your Git workflow. This page provides an overview of all available commands.</p>"},{"location":"user-guide/commands/overview/#available-commands","title":"Available Commands","text":"Command Description <code>init</code> Set up noidea in your Git repository <code>suggest</code> Generate commit message suggestions based on staged changes <code>moai</code> Display feedback about your most recent commit <code>summary</code> Generate a summary of your recent Git activity <code>config</code> Manage noidea configuration"},{"location":"user-guide/commands/overview/#getting-help","title":"Getting Help","text":"<p>For any command, you can use the <code>--help</code> flag to see available options:</p> <pre><code>noidea &lt;command&gt; --help\n</code></pre>"},{"location":"user-guide/commands/overview/#common-options","title":"Common Options","text":"<p>These options are available for most commands:</p> Option Description <code>--version</code>, <code>-v</code> Show version information <code>--help</code>, <code>-h</code> Show help for a command"},{"location":"user-guide/commands/overview/#detailed-command-documentation","title":"Detailed Command Documentation","text":"<p>Each command has its own detailed documentation page:</p> <ul> <li><code>init</code> - Setup noidea in your repository</li> <li><code>suggest</code> - Generate commit message suggestions</li> <li><code>moai</code> - Get feedback on your commits</li> <li><code>summary</code> - Analyze your Git history</li> <li><code>config</code> - Configure noidea</li> </ul>"},{"location":"user-guide/commands/overview/#examples","title":"Examples","text":"<p>Here are some common usage examples:</p>"},{"location":"user-guide/commands/overview/#setting-up-noidea","title":"Setting up noidea","text":"<pre><code># Initialize noidea in your repository\nnoidea init\n</code></pre>"},{"location":"user-guide/commands/overview/#getting-commit-suggestions","title":"Getting commit suggestions","text":"<pre><code># Get a commit message suggestion\nnoidea suggest\n\n# Pipe the suggestion directly to commit\nnoidea suggest | git commit -F-\n</code></pre>"},{"location":"user-guide/commands/overview/#getting-moai-feedback","title":"Getting Moai feedback","text":"<pre><code># Get feedback on your last commit\nnoidea moai\n\n# Use AI-powered feedback with a specific personality\nnoidea moai --ai --personality supportive_mentor\n</code></pre>"},{"location":"user-guide/commands/overview/#generating-summaries","title":"Generating summaries","text":"<pre><code># Get a summary of the last 30 days\nnoidea summary --days 30\n\n# Get a weekly summary\nnoidea summary --weeks 1\n</code></pre>"},{"location":"user-guide/commands/suggest/","title":"suggest","text":"<p>The <code>suggest</code> command generates AI-powered commit message suggestions based on your staged changes, helping you create clear, consistent, and professional commit messages.</p>"},{"location":"user-guide/commands/suggest/#usage","title":"Usage","text":"<pre><code>noidea suggest [options]\n</code></pre>"},{"location":"user-guide/commands/suggest/#description","title":"Description","text":"<p>This command analyzes your staged Git changes and generates a conventional commit message suggestion that follows best practices. When used with Git hooks, it can automatically pre-fill your commit message template.</p>"},{"location":"user-guide/commands/suggest/#options","title":"Options","text":"Option Description <code>--history</code>, <code>-n</code> Number of recent commits to analyze for context (default: 10) <code>--full-diff</code>, <code>-f</code> Include the full diff instead of a summary for better (but slower) suggestions <code>--interactive</code>, <code>-i</code> Enable interactive mode to approve/reject suggestions <code>--file</code>, <code>-F</code> Path to commit message file (for Git hooks) <code>--quiet</code>, <code>-q</code> Output only the message without UI elements (for scripts)"},{"location":"user-guide/commands/suggest/#examples","title":"Examples","text":""},{"location":"user-guide/commands/suggest/#basic-usage","title":"Basic Usage","text":"<pre><code># Generate a commit message suggestion\nnoidea suggest\n</code></pre>"},{"location":"user-guide/commands/suggest/#with-more-context","title":"With More Context","text":"<pre><code># Include more commit history for better context\nnoidea suggest --history 20\n</code></pre>"},{"location":"user-guide/commands/suggest/#detailed-analysis","title":"Detailed Analysis","text":"<pre><code># Use full diff for more detailed analysis\nnoidea suggest --full-diff\n</code></pre>"},{"location":"user-guide/commands/suggest/#git-integration","title":"Git Integration","text":"<pre><code># Pipe directly to Git commit\nnoidea suggest | git commit -F-\n\n# Use with Git hooks\n# This happens automatically if you've run 'noidea init'\ngit config noidea.suggest true\n</code></pre>"},{"location":"user-guide/commands/suggest/#how-it-works","title":"How It Works","text":"<ol> <li>Analysis: The command extracts your staged changes and recent commit history</li> <li>Context Building: It builds context about your repository's commit style</li> <li>AI Processing: The staged diff is analyzed by an AI model</li> <li>Suggestion: A conventional commit message is suggested, typically following the format:    <pre><code>type(scope): short description\n\nLonger description if needed\n</code></pre></li> </ol>"},{"location":"user-guide/commands/suggest/#common-types","title":"Common Types","text":"<ul> <li><code>feat</code>: A new feature</li> <li><code>fix</code>: A bug fix</li> <li><code>docs</code>: Documentation changes</li> <li><code>style</code>: Code style changes (formatting, etc.)</li> <li><code>refactor</code>: Code changes that neither fix bugs nor add features</li> <li><code>test</code>: Adding or fixing tests</li> <li><code>chore</code>: Maintenance tasks, dependencies, etc.</li> </ul>"},{"location":"user-guide/commands/suggest/#tips","title":"Tips","text":"<ul> <li>Stage only related changes in a single commit for better suggestions</li> <li>Use <code>--full-diff</code> when you need more detailed analysis</li> <li>For complex changes, review and edit the suggestion as needed </li> </ul>"},{"location":"user-guide/commands/summary/","title":"Summary Command","text":"<p>The <code>summary</code> command analyzes your Git history and provides statistics and insights about your recent commits.</p>"},{"location":"user-guide/commands/summary/#usage","title":"Usage","text":"<pre><code>noidea summary [flags]\n</code></pre>"},{"location":"user-guide/commands/summary/#description","title":"Description","text":"<p>The summary command provides a detailed overview of your Git activity, including:</p> <ul> <li>Total number of commits</li> <li>Lines added and removed</li> <li>Files changed</li> <li>Commit patterns by day and time</li> <li>Contribution trends</li> <li>AI-powered insights (when enabled)</li> </ul> <p>By default, the command shows commits from the last 7 days. If no commits are found in this period, it automatically shows your entire repository history.</p>"},{"location":"user-guide/commands/summary/#options","title":"Options","text":"Flag Short Default Description <code>--days</code> <code>-d</code> <code>7</code> Number of days to include in summary (use 0 for all history) <code>--all</code> <code>-A</code> <code>false</code> Show complete repository history regardless of --days value <code>--export</code> <code>-e</code> Export format: text, markdown, or html <code>--stats-only</code> <code>-s</code> <code>false</code> Show only statistics without AI insights <code>--ai</code> <code>-a</code> <code>false</code> Include AI insights (default: use config setting) <code>--personality</code> <code>-p</code> Personality to use for insights (default: from config) <code>--show-commits</code> <code>-c</code> <code>false</code> Include detailed commit history in the output"},{"location":"user-guide/commands/summary/#examples","title":"Examples","text":""},{"location":"user-guide/commands/summary/#basic-usage","title":"Basic Usage","text":"<pre><code># Show commits from the last 7 days\nnoidea summary\n\n# Show commits from the last 30 days\nnoidea summary --days 30\n\n# Show all repository history\nnoidea summary --all\n# Or equivalently:\nnoidea summary --days 0\n</code></pre>"},{"location":"user-guide/commands/summary/#output-options","title":"Output Options","text":"<pre><code># Show only statistics without AI insights\nnoidea summary --stats-only\n\n# Include detailed commit history in the output\nnoidea summary --show-commits\n\n# Use a specific AI personality for insights\nnoidea summary --ai --personality supportive_mentor\n</code></pre>"},{"location":"user-guide/commands/summary/#exporting-results","title":"Exporting Results","text":"<pre><code># Export as plain text\nnoidea summary --export text\n\n# Export as markdown\nnoidea summary --export markdown\n\n# Export as HTML\nnoidea summary --export html\n</code></pre>"},{"location":"user-guide/commands/summary/#ai-insights","title":"AI Insights","text":"<p>When AI integration is enabled (either by default in your config or using the <code>--ai</code> flag), the summary includes AI-powered analysis of your coding patterns and provides personalized insights.</p> <p>The AI insights will use the personality specified in your configuration or via the <code>--personality</code> flag.</p>"},{"location":"user-guide/commands/summary/#related-commands","title":"Related Commands","text":"<ul> <li><code>moai</code> - Display feedback for your commits</li> <li><code>suggest</code> - Generate commit message suggestions</li> <li><code>config</code> - Configure noidea settings </li> </ul>"},{"location":"user-guide/features/api-key-management/","title":"API Key Management","text":"<p>This document provides best practices for managing API keys with noidea.</p>"},{"location":"user-guide/features/api-key-management/#secure-storage","title":"Secure Storage","text":"<p>As of version v0.3.0, noidea securely stores API keys using your system's native keyring/keychain when available:</p> <ul> <li>macOS: Uses the Keychain</li> <li>Windows: Uses the Windows Credential Manager</li> <li>Linux: Uses the Secret Service API (requires libsecret)</li> </ul> <p>If the system keyring is unavailable, a fallback encrypted storage is used in <code>~/.noidea/secure/</code>.</p>"},{"location":"user-guide/features/api-key-management/#setting-up-your-api-key","title":"Setting Up Your API Key","text":"<p>You can set up your API key in several ways:</p>"},{"location":"user-guide/features/api-key-management/#1-using-the-cli-recommended","title":"1. Using the CLI (Recommended)","text":"<pre><code># Set up API key securely\nnoidea config apikey\n\n# Check API key storage status\nnoidea config apikey-status\n\n# Remove a stored API key\nnoidea config apikey-remove\n\n# Generate commands to clean environment variables\nnoidea config clean-env\n</code></pre> <p>When setting up a key with <code>noidea config apikey</code>, the system will: 1. Prompt for the API key (input is hidden for security) 2. Validate the key with the provider to ensure it works 3. Store the key securely in your system's keyring or fallback storage</p> <p>The <code>apikey-status</code> command will: 1. Show which storage system is being used 2. Check if your API key is valid with a test request 3. Display whether the key is working correctly</p>"},{"location":"user-guide/features/api-key-management/#2-using-environment-variables-alternative","title":"2. Using Environment Variables (Alternative)","text":"<p>You can still use environment variables if you prefer:</p> <pre><code># For xAI\nexport XAI_API_KEY=your_api_key_here\n\n# For OpenAI\nexport OPENAI_API_KEY=your_api_key_here\n\n# For DeepSeek\nexport DEEPSEEK_API_KEY=your_api_key_here\n\n# Generic (will use whatever provider is configured)\nexport NOIDEA_API_KEY=your_api_key_here\n</code></pre> <p>Important Note: Environment variables will take precedence over secure storage. If you want to use secure storage, make sure these environment variables are not set.</p>"},{"location":"user-guide/features/api-key-management/#3-using-env-files-not-recommended","title":"3. Using .env Files (Not Recommended)","text":"<p>While still supported for backward compatibility, we recommend transitioning away from .env files:</p> <pre><code># Create or edit ~/.noidea/.env\nXAI_API_KEY=your_api_key_here\n</code></pre>"},{"location":"user-guide/features/api-key-management/#provider-aliases","title":"Provider Aliases","text":"<p>NoIdea supports a flexible provider aliasing system that maps different names to standard provider identifiers. This is helpful for users who might refer to the same provider by different names.</p>"},{"location":"user-guide/features/api-key-management/#built-in-aliases","title":"Built-in Aliases","text":"<p>The system comes with default aliases for common providers:</p> Standard Name Recognized Aliases <code>openai</code> <code>open-ai</code>, <code>gpt</code>, <code>chatgpt</code>, <code>davinci</code> <code>xai</code> <code>x-ai</code>, <code>grok</code>, <code>x.ai</code> <code>deepseek</code> <code>deep-seek</code>, <code>deepseek-ai</code> <code>anthropic</code> <code>claude</code>, <code>anthropic-ai</code> <code>mistral</code> <code>mistral-ai</code>, <code>mistralai</code>"},{"location":"user-guide/features/api-key-management/#custom-provider-aliases","title":"Custom Provider Aliases","text":"<p>You can define your own aliases by creating or editing the file <code>~/.noidea/secure/provider_aliases.json</code>:</p> <pre><code>{\n  \"openai\": [\"openai-custom\", \"my-gpt\"],\n  \"custom-provider\": [\"custom1\", \"custom2\"]\n}\n</code></pre> <p>When you first use the secure storage system, a template file is automatically created with examples.</p> <p>Custom aliases are merged with the built-in ones, with your custom aliases taking precedence in case of conflicts.</p> <p>For example, with the configuration above: - <code>openai-custom</code> would be normalized to <code>openai</code> - <code>custom1</code> would be normalized to <code>custom-provider</code> - You can add entirely new providers not included in the built-in list</p> <p>This feature is especially useful for: - Teams with custom naming conventions - Using providers not officially supported yet - Creating shortcuts for commonly used providers</p>"},{"location":"user-guide/features/api-key-management/#api-key-priority-order","title":"API Key Priority Order","text":"<p>The system uses the following order of precedence when looking for API keys:</p> <ol> <li>Environment variables (highest priority)</li> <li>Secure storage (keyring/keychain or fallback encrypted file)</li> <li>Config file (lowest priority - not recommended for API keys)</li> </ol> <p>If you've set up a key using secure storage but it's not being used, check if any environment variables are overriding it with:</p> <pre><code>noidea config apikey-status\n</code></pre> <p>To clean environment variables and use secure storage instead:</p> <pre><code>noidea config clean-env\n</code></pre> <p>This will generate commands you can run to remove API key environment variables.</p>"},{"location":"user-guide/features/api-key-management/#api-key-security-best-practices","title":"API Key Security Best Practices","text":"<ol> <li>Never commit API keys to version control</li> <li>Ensure <code>.env</code> files are in your <code>.gitignore</code></li> <li> <p>Use secure storage or environment variables instead</p> </li> <li> <p>Rotate keys periodically</p> </li> <li>Change your API keys regularly</li> <li> <p>Use <code>noidea config apikey</code> to update your stored key</p> </li> <li> <p>Use the least privileged key possible</p> </li> <li> <p>Only use keys with the permissions your application needs</p> </li> <li> <p>Monitor key usage</p> </li> <li>Check the provider's dashboard for unusual activity</li> <li> <p>Set up usage alerts if available</p> </li> <li> <p>Environment separation</p> </li> <li>Use different keys for development and production</li> </ol>"},{"location":"user-guide/features/api-key-management/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with secure storage:</p> <ol> <li>Check storage status and key validity <pre><code>noidea config apikey-status\n</code></pre>    This command will verify:</li> <li>If your keyring is available</li> <li>If your API key is properly stored</li> <li> <p>If your API key is valid and working</p> </li> <li> <p>Ensure dependencies are installed</p> </li> <li> <p>On Linux, install libsecret: <code>sudo apt-get install libsecret-1-dev</code></p> </li> <li> <p>Remove environment variables</p> </li> <li> <p>If secure storage is working but not being used, environment variables may be taking precedence    <pre><code>noidea config clean-env\n</code></pre></p> </li> <li> <p>If validation fails</p> </li> <li>Check if your API key is correct</li> <li>Ensure you have an active subscription with the provider</li> <li> <p>Check if your network can reach the provider's API servers</p> </li> <li> <p>Provider alias issues</p> </li> <li>If your provider isn't being recognized correctly, check or customize the aliases in <code>~/.noidea/secure/provider_aliases.json</code></li> <li>Ensure the JSON file is valid and properly formatted</li> </ol>"},{"location":"user-guide/features/api-key-management/#migration-from-previous-versions","title":"Migration from Previous Versions","text":"<p>If you're upgrading from a version before v0.3.0:</p> <ol> <li> <p>Use the migration script to move your API key to secure storage:    <pre><code>./scripts/migrate_to_secure.sh\n</code></pre></p> </li> <li> <p>Or run <code>noidea config apikey</code> to set up your API key securely</p> </li> <li> <p>Remove any API keys from <code>.env</code> files or your config file</p> </li> <li> <p>Remove API key environment variables with:    <pre><code>noidea config clean-env\n</code></pre></p> </li> </ol> <p>For more information, please see the Configuration Guide. </p>"},{"location":"user-guide/features/git-integration/","title":"Git Integration","text":"<p>noidea integrates seamlessly with Git through hooks and extensions, enhancing your Git workflow without getting in the way.</p>"},{"location":"user-guide/features/git-integration/#git-hooks","title":"Git Hooks","text":"<p>When you run <code>noidea init</code> in a repository, it sets up several Git hooks:</p>"},{"location":"user-guide/features/git-integration/#prepare-commit-msg","title":"prepare-commit-msg","text":"<p>This hook is triggered before a commit message editor is displayed. It:</p> <ul> <li>Analyzes your staged changes</li> <li>Generates a professionally formatted commit message suggestion</li> <li>Pre-fills your commit message template</li> </ul> <p>This makes it easy to create consistent, descriptive commit messages without extra effort.</p>"},{"location":"user-guide/features/git-integration/#post-commit","title":"post-commit","text":"<p>After each commit, this hook:</p> <ul> <li>Runs the <code>noidea moai</code> command</li> <li>Displays a Moai face with feedback about your commit</li> <li>Optionally uses AI to analyze your commit and provide intelligent feedback</li> </ul>"},{"location":"user-guide/features/git-integration/#git-command-extension","title":"Git Command Extension","text":"<p>noidea can be used as a Git subcommand, allowing you to run:</p> <pre><code>git noidea &lt;command&gt;\n</code></pre> <p>This is enabled during installation by creating a Git alias.</p>"},{"location":"user-guide/features/git-integration/#manual-hook-installation","title":"Manual Hook Installation","text":"<p>If you prefer to manually set up the hooks:</p> <pre><code># Copy the hook scripts to your .git/hooks directory\ncp scripts/prepare-commit-msg .git/hooks/\ncp scripts/post-commit.sh .git/hooks/post-commit\n\n# Make them executable\nchmod +x .git/hooks/prepare-commit-msg\nchmod +x .git/hooks/post-commit\n</code></pre>"},{"location":"user-guide/features/git-integration/#disabling-hooks","title":"Disabling Hooks","text":"<p>You can disable hooks temporarily by:</p> <pre><code># Skip all hooks for a specific commit\ngit commit --no-verify -m \"your message\"\n\n# Disable commit suggestions permanently\ngit config noidea.suggest false\n</code></pre>"},{"location":"user-guide/features/git-integration/#best-practices","title":"Best Practices","text":"<p>For the best experience with noidea's Git integration:</p> <ol> <li>Make focused commits - Commit related changes together for better suggestions</li> <li>Use conventional commit format - This helps noidea understand your commit patterns</li> <li>Install noidea hooks in each repository - Run <code>noidea init</code> in each repo you want to use it in</li> </ol>"},{"location":"user-guide/features/git-integration/#troubleshooting","title":"Troubleshooting","text":"<p>If hooks aren't working:</p> <ol> <li>Verify the hooks are executable: <code>ls -la .git/hooks/</code></li> <li>Ensure noidea is in your PATH: <code>which noidea</code></li> <li>Check Git hooks are enabled: <code>git config core.hooksPath</code> </li> </ol>"},{"location":"user-guide/features/github-integration/","title":"GitHub Integration and Enhanced Release Notes","text":"<p>This document explains how to use the GitHub integration features of NoIdea, including the AI-enhanced release notes generator.</p>"},{"location":"user-guide/features/github-integration/#setting-up-github-integration","title":"Setting Up GitHub Integration","text":"<p>The easiest way to set up GitHub integration is to run the setup script:</p> <pre><code>./scripts/setup-github.sh\n</code></pre> <p>This script will guide you through: 1. GitHub authentication using a Personal Access Token (PAT) 2. Installing GitHub hooks for automated release creation</p>"},{"location":"user-guide/features/github-integration/#manual-setup","title":"Manual Setup","text":"<p>If you prefer to set up GitHub integration manually, follow these steps:</p> <ol> <li> <p>Authenticate with GitHub:    <pre><code>noidea github auth\n</code></pre></p> </li> <li> <p>Install GitHub hooks:    <pre><code>noidea github hook-install\n</code></pre></p> </li> </ol>"},{"location":"user-guide/features/github-integration/#enhanced-release-notes","title":"Enhanced Release Notes","text":"<p>NoIdea can automatically generate well-structured, user-friendly release notes when you create a new tag or release.</p>"},{"location":"user-guide/features/github-integration/#how-it-works","title":"How it Works","text":"<p>When you create a new Git tag (either manually or using <code>./scripts/version.sh</code>), NoIdea will:</p> <ol> <li>Gather all commit messages between the previous tag and the current tag</li> <li>If AI is enabled, process these messages using a language model to create user-friendly notes</li> <li>Generate a structured, organized release document grouped by change type</li> <li>Create or update a GitHub release with these enhanced notes</li> </ol>"},{"location":"user-guide/features/github-integration/#using-enhanced-release-notes","title":"Using Enhanced Release Notes","text":"<p>The enhanced release notes feature integrates seamlessly with your existing workflow:</p> <ol> <li>When running <code>./scripts/version.sh</code> to bump a version, you are prompted whether to generate release notes immediately or wait for GitHub workflows</li> <li>If you create tags manually, the post-tag hook will suggest the best command to run for release notes generation</li> <li>You can manually generate or update release notes for any tag:    <pre><code>noidea github release notes --tag=v1.2.3\n</code></pre></li> </ol>"},{"location":"user-guide/features/github-integration/#workflow-aware-release-notes","title":"Workflow-Aware Release Notes","text":"<p>One of the most powerful features is the ability to wait for GitHub Actions workflows to complete before generating release notes:</p> <pre><code>noidea github release notes --wait-for-workflows\n</code></pre> <p>This command: 1. Checks the status of GitHub workflow runs for the specified tag 2. Displays a live progress indicator with elapsed time 3. Once all workflows complete, generates release notes that preserve GitHub's auto-generated content 4. Enhances only the overview section with AI-generated content while keeping all commit links intact</p> <p>You can adjust the maximum wait time (default: 5 minutes):</p> <pre><code>noidea github release notes --wait-for-workflows --max-wait=600  # Wait up to 10 minutes\n</code></pre>"},{"location":"user-guide/features/github-integration/#ai-powered-release-notes","title":"AI-Powered Release Notes","text":"<p>If you have LLM features enabled in your NoIdea configuration, release notes will be generated using AI. This provides:</p> <ul> <li>Better organization of changes into logical sections</li> <li>More user-friendly language explaining technical changes</li> <li>Consistent formatting and style</li> <li>Focus on user impact rather than raw commit messages</li> </ul> <p>To force AI-generation even if LLM is disabled in your config:</p> <pre><code>noidea github release notes --tag=v1.2.3 --ai\n</code></pre>"},{"location":"user-guide/features/github-integration/#integration-with-githubs-release-notes","title":"Integration with GitHub's Release Notes","text":"<p>When using the <code>--wait-for-workflows</code> flag, NoIdea intelligently preserves GitHub's auto-generated content:</p> <ol> <li>It waits for GitHub Actions workflows to complete, including any that generate release notes</li> <li>It preserves GitHub's \"What's Changed\" section with commit links and PR references</li> <li>It enhances only the \"Overview\" section with AI-generated content for better readability</li> </ol> <p>This gives you the best of both worlds: GitHub's detailed changelog with commit links, and an AI-enhanced overview that's more user-friendly.</p>"},{"location":"user-guide/features/github-integration/#automatic-mode","title":"Automatic Mode","text":"<p>For complete automation, you can use the <code>--auto</code> flag, which enables both AI generation and skips approval:</p> <pre><code>noidea github release notes --auto\n</code></pre>"},{"location":"user-guide/features/github-integration/#examples","title":"Examples","text":"<p>Standard release notes (without AI): <pre><code># Release v1.2.3\n\n## Changes\n\n- Add GitHub integration\n- Fix bug in config loading\n- Update dependencies\n</code></pre></p> <p>AI-enhanced release notes: <pre><code># Release v1.2.3\n\n## Overview\nThis release adds GitHub integration capabilities, fixes several configuration bugs, and updates dependencies for improved security.\n\n## \ud83d\ude80 New Features\n- **GitHub Integration**: Added complete GitHub API integration with secure token storage\n- **Release Note Generation**: Automated creation of release notes from commit history\n\n## \ud83d\udee0\ufe0f Bug Fixes\n- Fixed configuration loading issues when user directory contains spaces\n- Resolved error handling in API key validation\n\n## \ud83d\udd27 Maintenance\n- Updated all dependencies to latest versions\n- Improved documentation for setup process\n</code></pre></p>"},{"location":"user-guide/features/github-integration/#command-reference","title":"Command Reference","text":"Command Description <code>noidea github auth</code> Authenticate with GitHub using a Personal Access Token <code>noidea github status</code> Check GitHub authentication status <code>noidea github logout</code> Remove stored GitHub credentials <code>noidea github release create --tag=TAG</code> Manually create a GitHub release <code>noidea github release notes --tag=TAG</code> Generate enhanced release notes <code>noidea github release notes --wait-for-workflows</code> Wait for GitHub Actions to complete before generating notes <code>noidea github release notes --auto</code> Automatically generate and update notes without interaction <code>noidea github hook-install</code> Install GitHub hooks for automation"},{"location":"user-guide/features/personalities/","title":"AI Personalities","text":"<p>noidea's personality system allows you to customize the tone and style of AI-generated feedback, making your Git experience more enjoyable and personalized.</p>"},{"location":"user-guide/features/personalities/#built-in-personalities","title":"Built-in Personalities","text":"<p>noidea comes with several built-in personalities:</p> Personality Description Best For <code>professional_sass</code> Professional with subtle hints of sass Day-to-day work <code>snarky_reviewer</code> Witty, sarcastic code reviewer Fun environments <code>supportive_mentor</code> Encouraging and helpful Learning/teaching <code>git_expert</code> Technical Git best practices Professional teams <code>motivational_speaker</code> Energetic and enthusiastic Motivation boosts"},{"location":"user-guide/features/personalities/#using-personalities","title":"Using Personalities","text":"<p>You can select a personality in several ways:</p>"},{"location":"user-guide/features/personalities/#command-line","title":"Command Line","text":"<pre><code># Use with moai command\nnoidea moai --ai --personality supportive_mentor\n\n# List all available personalities\nnoidea moai --list-personalities\n</code></pre>"},{"location":"user-guide/features/personalities/#configuration-file","title":"Configuration File","text":"<p>In your <code>~/.noidea/config.json</code>:</p> <pre><code>{\n  \"moai\": {\n    \"personality\": \"snarky_reviewer\"\n  }\n}\n</code></pre>"},{"location":"user-guide/features/personalities/#environment-variable","title":"Environment Variable","text":"<pre><code>export NOIDEA_PERSONALITY=\"git_expert\"\n</code></pre>"},{"location":"user-guide/features/personalities/#creating-custom-personalities","title":"Creating Custom Personalities","text":"<p>You can create your own personalities by creating a <code>personalities.toml</code> file in your <code>~/.noidea/</code> directory:</p> <pre><code>[personalities.my_custom_personality]\nname = \"My Custom Personality\"\ndescription = \"A personality that matches my team's culture\"\nsystem_prompt = \"\"\"\nYou are a Git expert with my company's specific style.\nYour responses should be concise and follow our team conventions.\nHighlight performance improvements and security considerations.\nKeep your responses under 100 characters.\n\"\"\"\nuser_prompt_format = \"\"\"\nCommit message: \"{{.Message}}\"\nTime of day: {{.TimeOfDay}}\n{{if .Diff}}Commit diff summary: {{.Diff}}{{end}}\n\nProvide feedback that matches our team culture:\n\"\"\"\nmax_tokens = 150\ntemperature = 0.5\n</code></pre>"},{"location":"user-guide/features/personalities/#personality-template-variables","title":"Personality Template Variables","text":"<p>Your custom personalities can use these template variables:</p> Variable Description <code>{{.Message}}</code> The commit message <code>{{.TimeOfDay}}</code> Current time (e.g., \"morning\", \"afternoon\") <code>{{.Diff}}</code> Commit diff (if included) <code>{{.Username}}</code> Git username <code>{{.RepoName}}</code> Repository name <code>{{.CommitHistory}}</code> Recent commit messages"},{"location":"user-guide/features/personalities/#personality-settings","title":"Personality Settings","text":"Setting Description Default <code>name</code> Display name for the personality Required <code>description</code> Brief description Required <code>system_prompt</code> Instructions for the AI Required <code>user_prompt_format</code> Template for the user prompt Required <code>max_tokens</code> Maximum response length 150 <code>temperature</code> Randomness (0.0-1.0) 0.7"},{"location":"user-guide/features/personalities/#setting-a-default-personality","title":"Setting a Default Personality","text":"<p>To set the default personality in your configuration:</p> <pre><code>{\n  \"moai\": {\n    \"personality\": \"my_custom_personality\",\n    \"personality_file\": \"~/.noidea/personalities.toml\"\n  }\n}\n</code></pre>"},{"location":"user-guide/features/personalities/#tips-for-creating-personalities","title":"Tips for Creating Personalities","text":"<ul> <li>Keep system prompts concise and specific</li> <li>For consistent results, use lower temperature values (0.2-0.5)</li> <li>For more creative results, use higher values (0.7-0.9)</li> <li>Test your personality with different types of commits</li> <li>Include specific guidelines about response formatting and length </li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/security/","title":"Security","text":""},{"location":"blog/category/development/","title":"Development","text":""}]}