#!/bin/sh
#
# prepare-commit-msg hook for noidea's commit message suggestion feature
# 
# This script runs when Git is about to create a commit. It generates a helpful
# commit message suggestion based on the staged changes using the noidea tool.
#
# To install this hook:
# 1. Make it executable (chmod +x prepare-commit-msg)
# 2. Copy it to .git/hooks/ in your repository
# 3. Configure noidea with 'git config noidea.suggest true' to enable
#
# Note: Commit message suggestions always use a professional format
# regardless of any personality settings used elsewhere in noidea.

# Define some terminal colors if supported
if [ -t 1 ]; then
    GREEN="\033[0;32m"
    YELLOW="\033[1;33m"
    CYAN="\033[0;36m"
    RED="\033[0;31m"
    RESET="\033[0m"
else
    # No colors in non-terminal environments
    GREEN=""
    YELLOW=""
    CYAN=""
    RED=""
    RESET=""
fi

# Get commit message file and source from Git
COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

# Check if noidea's suggestion feature is enabled
if [ "$(git config --get noidea.suggest)" != "true" ]; then
    # Feature disabled, exit silently
    exit 0
fi

# Skip suggestion for special commit types
if [ "$COMMIT_SOURCE" = "merge" ] || [ "$COMMIT_SOURCE" = "squash" ] || [ -n "$COMMIT_SOURCE" ]; then
    # Skip for merges, squashes, and other special commits
    exit 0
fi

# Print a divider for visual separation
print_divider() {
    echo "${CYAN}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${RESET}"
}

# Find the noidea binary in several possible locations
# POSIX-compatible function definition
find_noidea() {
    # Check if it's in PATH
    if command -v noidea >/dev/null 2>&1; then
        echo "noidea"
        return 0
    fi

    # Try to determine the git root
    GIT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ -n "$GIT_ROOT" ]; then
        # Check common binary locations - one by one for better POSIX compatibility
        for location in "$GIT_ROOT/noidea" "$GIT_ROOT/bin/noidea" "$GIT_ROOT/build/noidea" "$GIT_ROOT/dist/noidea"; do
            if [ -x "$location" ]; then
                echo "$location"
                return 0
            fi
        done
    fi
    
    # Not found
    return 1
}

# Extract issue references from branch name or staged files
detect_issue_references() {
    # Check for issue references in branch name
    BRANCH_NAME=$(git symbolic-ref --short HEAD 2>/dev/null)
    
    # Extract issue numbers from common branch naming patterns:
    # issue/123, feature/123-description, fix/123_bug, #123-fix, etc.
    BRANCH_ISSUES=$(echo "$BRANCH_NAME" | grep -o -E '(issue|fix|feature|hotfix)[/_-]?#?([0-9]+)' | grep -o -E '[0-9]+' | sort -u)
    
    # Also try the pattern #123 in the branch name
    BRANCH_HASH_ISSUES=$(echo "$BRANCH_NAME" | grep -o -E '#([0-9]+)' | grep -o -E '[0-9]+' | sort -u)
    
    # Look at the first line of the existing commit message for references
    # This handles cases where the user has already manually added a reference
    MSG_ISSUES=""
    if [ -s "$COMMIT_MSG_FILE" ]; then
        MSG_ISSUES=$(head -n 1 "$COMMIT_MSG_FILE" | grep -o -E '(#|issue |fixes |closes )[0-9]+' | grep -o -E '[0-9]+' | sort -u)
    fi
    
    # Combine all detected issues and remove duplicates
    echo "$BRANCH_ISSUES $BRANCH_HASH_ISSUES $MSG_ISSUES" | tr ' ' '\n' | grep -v '^$' | sort -u
}

# Find the noidea binary
NOIDEA_BIN=$(find_noidea)
if [ -z "$NOIDEA_BIN" ]; then
    echo "${YELLOW}‚ö†Ô∏è  Warning: noidea binary not found, but noidea.suggest is enabled${RESET}"
    echo "${YELLOW}   Please ensure noidea is in your PATH or at the repository root${RESET}"
    exit 0
fi

# Check if the commit message already has content
COMMIT_HAS_CONTENT=0
if [ -s "$COMMIT_MSG_FILE" ]; then
    # Has content already - user may have specified a message with -m
    # Skip if the file already has content beyond comments
    if grep -v "^#" "$COMMIT_MSG_FILE" | grep -q "[^[:space:]]"; then
        COMMIT_HAS_CONTENT=1
    fi
fi

# Check for GitHub issue integration
GITHUB_ISSUES_ENABLED=$(git config --get noidea.github-issues)

# Prepare for issue references
ISSUE_REFS=$(detect_issue_references)

# Always use non-interactive mode for hooks to prevent stdin issues
# The user can still edit the message in their editor after suggestion
INTERACTIVE_FLAG=""

# Check if there's enough history for context
COMMIT_COUNT=$(git rev-list --count HEAD 2>/dev/null || echo "0")
if [ "$COMMIT_COUNT" -lt 5 ]; then
    HISTORY_FLAG="--history 1"
else
    HISTORY_FLAG="--history 10"
fi

# Get full diff setting from config
FULL_DIFF=$(git config --get noidea.suggest.full-diff)
if [ "$FULL_DIFF" = "false" ]; then
    DIFF_FLAG=""
else
    # Default to using full diff for better commit messages
    DIFF_FLAG="--full-diff"
fi

# If we're not generating a message, but we have issue references and a message already exists
if [ "$COMMIT_HAS_CONTENT" -eq 1 ] && [ -n "$ISSUE_REFS" ] && [ "$GITHUB_ISSUES_ENABLED" = "true" ]; then
    # Add issue references to the existing commit message if not already present
    print_divider
    echo "${CYAN}üîó Checking for GitHub issue references...${RESET}"
    
    # Create a temporary file
    TEMP_FILE=$(mktemp)
    
    # Process each issue reference
    MODIFIED=0
    for ISSUE_NUM in $ISSUE_REFS; do
        # Skip if this issue number is already referenced in the message
        if grep -q -E "(#|issue |fixes |closes )$ISSUE_NUM" "$COMMIT_MSG_FILE"; then
            echo "${YELLOW}Issue #${ISSUE_NUM} already referenced in commit message${RESET}"
            continue
        fi
        
        # Prepare to add reference
        echo "${GREEN}Adding reference to issue #${ISSUE_NUM}${RESET}"
        MODIFIED=1
    done
    
    if [ "$MODIFIED" -eq 1 ]; then
        # Create a new message with issue references
        {
            # Get the first line of commit message
            head -n 1 "$COMMIT_MSG_FILE" | sed 's/$//'
            
            # Add issue references
            for ISSUE_NUM in $ISSUE_REFS; do
                if ! grep -q -E "(#|issue |fixes |closes )$ISSUE_NUM" "$COMMIT_MSG_FILE"; then
                    echo -n " #$ISSUE_NUM"
                fi
            done
            
            # Add a newline
            echo ""
            
            # Add the rest of the message
            tail -n +2 "$COMMIT_MSG_FILE"
        } > "$TEMP_FILE"
        
        # Replace original message file
        cat "$TEMP_FILE" > "$COMMIT_MSG_FILE"
        rm -f "$TEMP_FILE"
        
        print_divider
        echo "${GREEN}‚úÖ Added GitHub issue references to commit message${RESET}"
        exit 0
    else
        # No modifications needed
        echo "${GREEN}‚úÖ Commit message already contains issue references${RESET}"
        print_divider
        exit 0
    fi
fi

# Print a divider at the start
print_divider

# Generate a suggested commit message
echo "${CYAN}üß† Generating commit message suggestion...${RESET}"
"$NOIDEA_BIN" suggest $INTERACTIVE_FLAG $HISTORY_FLAG $DIFF_FLAG --file "$COMMIT_MSG_FILE" --quiet

# Check if we successfully wrote to the file and if it contains a valid message
ORIGINAL_SIZE=$(wc -c < "$COMMIT_MSG_FILE")
if [ -s "$COMMIT_MSG_FILE" ] && [ "$ORIGINAL_SIZE" -gt 5 ]; then
    # Get the number of lines in commit message
    LINE_COUNT=$(grep -c "" "$COMMIT_MSG_FILE" || echo "0")
    
    # Read the first line of the commit message for display
    PREVIEW=$(head -n 1 "$COMMIT_MSG_FILE")
    PREVIEW_LEN=$(echo "$PREVIEW" | wc -c)
    
    # Truncate preview if too long (POSIX compatible way)
    if [ "$PREVIEW_LEN" -gt 60 ]; then
        PREVIEW=$(echo "$PREVIEW" | cut -c 1-60)"..."
    fi
    
    # Add issue references to the generated message if available
    if [ -n "$ISSUE_REFS" ] && [ "$GITHUB_ISSUES_ENABLED" = "true" ]; then
        # Create a temporary file
        TEMP_FILE=$(mktemp)
        
        # Build new message with issue references
        {
            # Get the first line of commit message
            head -n 1 "$COMMIT_MSG_FILE" | sed 's/$//'
            
            # Add issue references if they don't already exist
            for ISSUE_NUM in $ISSUE_REFS; do
                if ! grep -q -E "(#|issue |fixes |closes )$ISSUE_NUM" "$COMMIT_MSG_FILE"; then
                    echo -n " #$ISSUE_NUM"
                fi
            done
            
            # Add a newline
            echo ""
            
            # Add the rest of the message
            tail -n +2 "$COMMIT_MSG_FILE"
        } > "$TEMP_FILE"
        
        # Replace original message file
        cat "$TEMP_FILE" > "$COMMIT_MSG_FILE"
        rm -f "$TEMP_FILE"
        
        # Update preview to show issue references
        PREVIEW=$(head -n 1 "$COMMIT_MSG_FILE")
        PREVIEW_LEN=$(echo "$PREVIEW" | wc -c)
        
        # Truncate preview if too long (POSIX compatible way)
        if [ "$PREVIEW_LEN" -gt 60 ]; then
            PREVIEW=$(echo "$PREVIEW" | cut -c 1-60)"..."
        fi
    fi
    
    print_divider
    echo "${GREEN}‚úÖ Commit message suggestion applied:${RESET}"
    echo "${PREVIEW}"
    
    # Indicate if there's more content in the message
    if [ "$LINE_COUNT" -gt 1 ]; then
        echo "${CYAN}(+ additional details in commit message)${RESET}"
    fi
    
    # Mention issue linking if applicable
    if [ -n "$ISSUE_REFS" ] && [ "$GITHUB_ISSUES_ENABLED" = "true" ]; then
        echo "${GREEN}‚úÖ Linked to GitHub issue(s): ${ISSUE_REFS}${RESET}"
    fi
    
    print_divider
    exit 0
else
    echo "${RED}‚ùå Failed to generate commit message suggestion${RESET}"
    exit 1
fi 